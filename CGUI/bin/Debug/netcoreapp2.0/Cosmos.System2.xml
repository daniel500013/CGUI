<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.System2</name>
    </assembly>
    <members>
        <member name="T:Cosmos.System.Console">
            <summary>
            Standard output stream.
            </summary>
        </member>
        <member name="F:Cosmos.System.Console.LineFeed">
            <summary>
            Line feed.
            </summary>
        </member>
        <member name="F:Cosmos.System.Console.CarriageReturn">
            <summary>
            Carriage return.
            </summary>
        </member>
        <member name="F:Cosmos.System.Console.Tab">
            <summary>
            Tab.
            </summary>
        </member>
        <member name="F:Cosmos.System.Console.Space">
            <summary>
            Space.
            </summary>
        </member>
        <member name="F:Cosmos.System.Console.mX">
            <summary>
            Cursor location on X axis.
            </summary>
        </member>
        <member name="P:Cosmos.System.Console.X">
            <summary>
            Get and set cursor location on X axis.
            </summary>
        </member>
        <member name="F:Cosmos.System.Console.mY">
            <summary>
            Cursor location on Y axis.
            </summary>
        </member>
        <member name="P:Cosmos.System.Console.Y">
            <summary>
            Get and set cursor location on Y axis.
            </summary>
        </member>
        <member name="P:Cosmos.System.Console.Cols">
            <summary>
            Get window width.
            </summary>
        </member>
        <member name="P:Cosmos.System.Console.Rows">
            <summary>
            Get window height.
            </summary>
        </member>
        <member name="F:Cosmos.System.Console.mText">
            <summary>
            Text screen.
            </summary>
        </member>
        <member name="M:Cosmos.System.Console.#ctor(Cosmos.HAL.TextScreenBase)">
            <summary>
            Console object constructor.
            </summary>
            <param name="textScreen">Output device.</param>
        </member>
        <member name="M:Cosmos.System.Console.Clear">
            <summary>
            Clear console and return cursor to (0,0).
            </summary>
        </member>
        <member name="M:Cosmos.System.Console.UpdateCursor">
            <summary>
            Update cursor position.
            </summary>
        </member>
        <member name="M:Cosmos.System.Console.DoLineFeed">
            <summary>
            Scroll the console up and move crusor to the start of the line.
            </summary>
        </member>
        <member name="M:Cosmos.System.Console.DoCarriageReturn">
            <summary>
            Move cursor to the start of the line.
            </summary>
        </member>
        <member name="M:Cosmos.System.Console.DoTab">
            <summary>
            Print tab to the console.
            </summary>
        </member>
        <member name="M:Cosmos.System.Console.Write(System.Byte)">
            <summary>
            Write char to the console.
            </summary>
            <param name="aChar">A char to write</param>
        </member>
        <member name="M:Cosmos.System.Console.Write(System.Byte[])">
            <summary>
            Write byte array to the console.
            </summary>
            <param name="aText">A byte array to write to the console.</param>
        </member>
        <member name="P:Cosmos.System.Console.Foreground">
            <summary>
            Get and set console foreground color.
            </summary>
        </member>
        <member name="P:Cosmos.System.Console.Background">
            <summary>
            Get and set console background color.
            </summary>
        </member>
        <member name="P:Cosmos.System.Console.CursorSize">
            <summary>
            Get and set cursor size.
            The value is percentage in the range 1-100.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when trying to set value out of range.</exception>
        </member>
        <member name="P:Cosmos.System.Console.CursorVisible">
            <summary>
            Get and set cursor visiblty.
            </summary>
        </member>
        <member name="T:Cosmos.System.FileSystem.CosmosVFS">
            <summary>
            Cosmos default virtual file system.
            </summary>
            <seealso cref="T:Cosmos.System.FileSystem.VFS.VFSBase" />
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.Initialize">
            <summary>
            Initializes the virtual file system.
            </summary>
            <exception cref="T:System.IO.IOException">Thrown on I/O exception.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown on memory error.</exception>
            <exception cref="T:System.OverflowException">Thrown on memory error.</exception>
            <exception cref="T:System.Exception">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.PathTooLongException">Thrown on fatal error.</exception>
            <exception cref="!:System.Security.SecurityException">Thrown on fatal error.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown on fatal error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.RegisterFileSystem(Cosmos.System.FileSystem.FileSystemFactory)">
            <summary>
            Register file system.
            </summary>
            <param name="aFileSystemFactory">A file system to register.</param>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.CreateFile(System.String)">
            <summary>
            Creates a new file.
            </summary>
            <param name="aPath">The full path including the file to create.</param>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if aPath is null.</item>
            <item>aNewDirectory is null or empty.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error / unknown directory entry type.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>the entry at aPath is not a file.</item>
            <item>Thrown when the parent directory of aPath is not a directory.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath length is zero.</item>
            <item>Thrown if aPath is invalid.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.PathTooLongException">Thrown when The aPath is longer than the system defined maximum length.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="aPath">The full path including the directory to create.</param>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if aPath is null.</item>
            <item>aNewDirectory is null or empty.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error / unknown directory entry type.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>the entry at aPath is not a directory.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath length is zero.</item>
            <item>Thrown if aPath is invalid.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.PathTooLongException">Thrown when The aPath is longer than the system defined maximum length.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.DeleteFile(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Deletes a file.
            </summary>
            <param name="aPath">The full path.</param>
            <returns>TRUE on success.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.DeleteDirectory(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="aPath">The full path.</param>
            <returns>TRUE on success.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetDirectoryListing(System.String)">
            <summary>
            Gets the directory listing for a path.
            </summary>
            <param name="aPath">The full path.</param>
            <returns>DirectoryEntry list value.</returns>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath is null or empty.</item>
            <item>Root path is null or empty.</item>
            <item>Memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if aFS is null.</item>
            <item>Root directory is null.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item>Thrown when root directory address is smaller then root directory address.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when aPath is too deep.</item>
            <item>Data lenght is greater then Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when unable to determine filesystem for path:  + aPath.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>path not found.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetDirectoryListing(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Gets the directory listing for a directory entry.
            </summary>
            <param name="aDirectory">The directory entry.</param>
            <returns>DirectoryEntry type list value.</returns>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aDirectory is null or empty.</item>
            <item>aDirectory.mFullPath is null or empty.</item>
            <item>Memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if aFS is null.</item>
            <item>Root directory is null.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item>Thrown when root directory address is smaller then root directory address.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when aDirectory.mFullPath is too deep.</item>
            <item>Data lenght is greater then Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when unable to determine filesystem for path:  + aDirectory.mFullPath.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>path not found.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetDirectory(System.String)">
            <summary>
            Gets the directory entry for a directory.
            </summary>
            <param name="aPath">The full path path.</param>
            <returns>A directory entry for the directory.</returns>
            <exception cref="T:System.Exception">Thrown when the entry at aPath is not a directory.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetFile(System.String)">
            <summary>
            Gets the directory entry for a file.
            </summary>
            <param name="aPath">The full path.</param>
            <returns>A directory entry for the file.</returns>
            <exception cref="T:System.Exception">Thrown when the entry at aPath is not a file.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetVolumes">
            <summary>
            Gets the volumes for all registered file systems.
            </summary>
            <returns>A list of directory entries for all volumes.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if filesystem is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when root directory address is smaller then root directory address.</exception>
            <exception cref="T:System.ArgumentException">Thrown when root path is null or empty.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetVolume(System.String)">
            <summary>
            Gets the directory entry for a volume.
            </summary>
            <param name="aPath">The volume root path.</param>
            <returns>A directory entry for the volume.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aPath is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aPath</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if filesystem is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when root directory address is smaller then root directory address.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetFileAttributes(System.String)">
            <summary>
            Gets the attributes for a File / Directory.
            </summary>
            <param name="aPath">The path of the File / Directory.</param>
            <returns>The File / Directory attributes.</returns>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath is null or empty.</item>
            <item>Thrown when aFS root path is null or empty.</item>
            <item>Thrown on memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if aFS is null.</item>
            <item>Thrown when root directory is null.</item>
            <item>Thrown on memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item>Thrown when root directory address is smaller then root directory address.</item>
            <item>Thrown on memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when aPath is too deep.</item>
            <item>Thrown when data lenght is greater then Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when data size invalid.</item>
            <item>Thrown on invalid directory entry type.</item>
            <item>Thrown when aPath entry not found.</item>
            <item>Thrown when unable to determine filesystem for path:  + aPath.</item>
            <item>Thrown aPath is neither a file neither a directory.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.SetFileAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes for a File / Directory.
            Not implemented.
            </summary>
            <param name="aPath">The path of the File / Directory.</param>
            <param name="fileAttributes">The attributes of the File / Directory.</param>
            <exception cref="T:System.NotImplementedException">Thrown always</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.InitializePartitions">
            <summary>
            Initializes the partitions for all block devices.
            </summary>
            <exception cref="T:System.IO.IOException">Thrown on I/O exception.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.InitializeFileSystems">
            <summary>
            Initializes the file system for all partitions.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if null partition exists.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.IOException">Thrown on I/O exception.</exception>
            <exception cref="T:System.IO.PathTooLongException">Thrown on fatal error.</exception>
            <exception cref="!:System.Security.SecurityException">Thrown on fatal error.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown on fatal error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetFileSystemFromPath(System.String)">
            <summary>
            Gets the file system from a path.
            </summary>
            <param name="aPath">The path.</param>
            <returns>The file system for the path.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aPath is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aPath</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.DoGetDirectoryEntry(System.String,Cosmos.System.FileSystem.FileSystem)">
            <summary>
            Attempts to get a directory entry for a path in a file system.
            </summary>
            <param name="aPath">The path.</param>
            <param name="aFS">The file system.</param>
            <returns>A directory entry for the path.</returns>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath is null or empty.</item>
            <item>Thrown when aFS root path is null or empty.</item>
            <item>Thrown on memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if aFS is null.</item>
            <item>Thrown when root directory is null.</item>
            <item>Thrown on memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item>Thrown when root directory address is smaller then root directory address.</item>
            <item>Thrown on memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when aPath is too deep.</item>
            <item>Thrown when data lenght is greater then Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when data size invalid.</item>
            <item>Thrown on invalid directory entry type.</item>
            <item>Thrown when aPath entry not found.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetVolume(Cosmos.System.FileSystem.FileSystem)">
            <summary>
            Gets the root directory entry for a volume in a file system.
            </summary>
            <param name="aFS">The file system containing the volume.</param>
            <returns>A directory entry for the volume.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if aFS is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when root directory address is smaller then root directory address.</exception>
            <exception cref="T:System.ArgumentException">Thrown when root path is null or empty.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.IsValidDriveId(System.String)">
            <summary>
            Verifies if driveId is a valid id for a drive.
            </summary>
            <param name="driveId">The id of the drive.</param>
            <returns>true if the drive id is valid, false otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if driveId length is smaller then 2, or greater than Int32.MaxValue.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetTotalSize(System.String)">
            <summary>
            Get total size in bytes.
            </summary>
            <param name="aDriveId">A drive id to get the size of.</param>
            <returns>long value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetAvailableFreeSpace(System.String)">
            <summary>
            Get available free space.
            </summary>
            <param name="aDriveId">A drive id to get the size of.</param>
            <returns>long value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetTotalFreeSpace(System.String)">
            <summary>
            Get total free space.
            </summary>
            <param name="aDriveId">A drive id to get the size of.</param>
            <returns>long value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetFileSystemType(System.String)">
            <summary>
            Get file system type.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <returns>string value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.GetFileSystemLabel(System.String)">
            <summary>
            Get file system label.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <returns>string value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.SetFileSystemLabel(System.String,System.String)">
            <summary>
            Set file system type.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <param name="aLabel">A label to be set.</param>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.CosmosVFS.Format(System.String,System.String,System.Boolean)">
            <summary>
            Format partition.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <param name="aDriveFormat">A drive format.</param>
            <param name="aQuick">Quick format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            <item>Fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when filesystem is null / memory error.</exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aDriveId is null or empty.</item>
            <item>Data length is 0.</item>
            <item>Root path is null or empty.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Unable to determine filesystem for path:  + aDriveId.</item>
            <item>Thrown when data size invalid.</item>
            <item>Thrown on unknown file system type.</item>
            <item>Thrown on fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.NotImplementedException">Thrown when FAT type is unknown.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="T:Cosmos.System.FileSystem.DiskManager">
            <summary>
            DiskManager class. Used to manage drives.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.DiskManager.Name">
            <summary>
            Get drive name.
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.DiskManager.#ctor(System.String)">
            <summary>
            Create new instance of <see cref="T:Cosmos.System.FileSystem.DiskManager"/> class.
            </summary>
            <param name="aDriveName">A drive name assinged to the disk.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if aDriveName is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if aDriveName length is smaller then 2, or greater than Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentException">Thrown if aDriveName is invalid drive identifier / not a root dir.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.DiskManager.Format(System.String,System.Boolean)">
            <summary>
            Format drive. (delete all)
            </summary>
            <param name="aDriveFormat">A drive format.</param>
            <param name="aQuick">Quick format.</param>
            <exception cref="T:System.NotImplementedException">
            <list type="bullet">
            <item>Thrown when formating to different filesystem format then current format.</item>
            <item>aQuick is false.</item>
            <item>Thrown when FAT type is unknown.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            <item>Fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when filesystem is null / memory error.</exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when drive name is null or empty.</item>
            <item>Data length is 0.</item>
            <item>Root path is null or empty.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Unable to determine filesystem for path:  + drive name.</item>
            <item>Thrown when data size invalid.</item>
            <item>Thrown on unknown file system type.</item>
            <item>Thrown on fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Text.DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.DiskManager.ChangeDriveLetter(System.String)">
            <summary>
            Change drive letter.
            </summary>
            <param name="aNewName">A new name to be set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when aNewName is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if aNewName length is smaller then 2, or greater than Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentException">Thrown if aNewName is invalid drive identifier / not a root dir.</exception>
            <exception cref="T:System.NotImplementedException">Thrown always.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.DiskManager.CreatePartion(System.Int64,System.Int64)">
            <summary>
            Create Partition.
            </summary>
            <param name="start">Start.</param>
            <param name="end">End.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if start / end is smaller then 0.</exception>
            <exception cref="T:System.ArgumentException">Thrown if end is smaller or equal to start.</exception>
            <exception cref="T:System.NotImplementedException">Thrown always.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FatFileSystemFactory.IsType(Cosmos.HAL.BlockDevice.Partition)">
            <summary>
            Checks if the file system can handle the partition.
            </summary>
            <param name="aDevice">The partition.</param>
            <returns>Returns true if the file system can handle the partition, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if partition is null.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FatFileSystemFactory.Create(Cosmos.HAL.BlockDevice.Partition,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.System.FileSystem.FAT.FatFileSystem"/> class.
            </summary>
            <param name="aDevice">The partition.</param>
            <param name="aRootPath">The root path.</param>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aDevice is null.</item>
            <item>Thrown when FatFileSystem is null.</item>
            <item>Thrown on fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aRootPath is null.</item>
            <item>Thrown on fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown on fatal error (contact support).</item>
            <item>>FAT signature not found.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="T:Cosmos.System.FileSystem.FAT.FatFileSystem">
            <summary>
            FatFileSystem class.
            </summary>
        </member>
        <member name="T:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat">
            <summary>
            FAT class. Used to manage individual FAT entry. 
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.#ctor(Cosmos.System.FileSystem.FAT.FatFileSystem,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat"/> class.
            </summary>
            <param name="aFileSystem">The file system.</param>
            <param name="aFatSector">The first sector of the FAT table.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when aFileSystem is null.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.GetFatEntrySizeInBytes">
            <summary>
            Gets the size of a FAT entry in bytes.
            </summary>
            <returns>The size of a FAT entry in bytes.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.GetFatChain(System.UInt32,System.Int64)">
            <summary>
            Gets the FAT chain.
            </summary>
            <param name="aFirstEntry">The first entry.</param>
            <param name="aDataSize">Size of a data to be stored in bytes.</param>
            <returns>An array of cluster numbers for the FAT chain.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the size of the chain is less then zero. (Never thrown)</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown on out of memory.</item>
            <item>data size invalid.</item>
            <item>unknown file system type</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">Thrown when bad aFirstEntry passed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.GetNextUnallocatedFatEntry">
            <summary>
            Gets the next unallocated FAT entry.
            </summary>
            <returns>The index of the next unallocated FAT entry.</returns>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / Failed to find an unallocated FAT entry.</exception>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.ClearFatEntry(System.UInt64)">
            <summary>
            Clears a FAT entry.
            </summary>
            <param name="aEntryNumber">The entry number.</param>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when FAT sector data is null.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.SetFatEntry(System.Byte[],System.UInt64,System.UInt64)">
            <summary>
            Set FAT entry.
            </summary>
            <param name="aData">A data array to be set.</param>
            <param name="aEntryNumber">A entry number to set.</param>
            <param name="aValue">A value to set.</param>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.GetFatEntry(System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
            Get FAT entry.
            </summary>
            <param name="aData">A data array to read from.</param>
            <param name="aEntryNumber">A entry number to get.</param>
            <param name="aValue">Output the data to aValue.</param>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
            <exception cref="T:System.ArgumentException">Thrown when aEntryNumber invalid.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when aData is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when aEntryNumber invalid.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.ClearAllFat">
            <summary>
            Clears all the FAT sectors.
            </summary>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / Unknown file system type.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Data length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.ReadFatSector(System.UInt64,System.Byte[]@)">
            <summary>
            Read FAT sector.
            </summary>
            <param name="aSector">A sector to read from.</param>
            <param name="aData">Output data byte.</param>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.WriteFatSector(System.UInt64,System.Byte[])">
            <summary>
            Write FAT sector.
            </summary>
            <param name="aSector">A sector to write to.</param>
            <param name="aData">A data to write.</param>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when aData is null.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.GetFatEntry(System.UInt32,System.UInt32@)">
            <summary>
            Gets a FAT entry.
            </summary>
            <param name="aEntryNumber">The entry number.</param>
            <param name="aValue">The entry value.</param>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
            <exception cref="T:System.ArgumentException">Thrown when bad aEntryNumber passed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when bad aEntryNumber passed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.SetFatEntry(System.UInt64,System.UInt64)">
            <summary>
            Sets a FAT entry.
            </summary>
            <param name="aEntryNumber">The entry number.</param>
            <param name="aValue">The value.</param>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when FAT sector data is null.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.FatEntryIsFree(System.UInt32)">
            <summary>
            Check if FAT entry is free.
            </summary>
            <param name="aValue">A entry to check.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.FatEntryIsEof(System.UInt32)">
            <summary>
            Check if EOF to FAT entry.
            </summary>
            <param name="aValue">A value to check if is EOF.</param>
            <returns>bool value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.FatEntryIsBad(System.UInt32)">
            <summary>
            Check if FAT entry is bad.
            </summary>
            <param name="aValue">A value to check0</param>
            <returns>bool value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Fat.FatEntryEofValue">
            <summary>
            The the EOF value for a specific FAT type.
            </summary>
            <returns>The EOF value.</returns>
            <exception cref="T:System.Exception">Unknown file system type.</exception>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.BytesPerCluster">
            <summary>
            Number of bytes per cluster.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.BytesPerSector">
            <summary>
            Number of bytes per sector.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.ClusterCount">
            <summary>
            Number of clusters.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.DataSector">
            <summary>
            First data sector.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.DataSectorCount">
            <summary>
            Number of data sectors.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.FatSectorCount">
            <summary>
            Number of FAT sectors.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.mFatType">
            <summary>
            FAT type.
            <para>
            possible types:
            <list type="bullet">
            <item>Unknown.</item>
            <item>Fat12.</item>
            <item>Fat16.</item>
            <item>Fat32.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.NumberOfFATs">
            <summary>
            Nuber of FATs in the filesystem.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.ReservedSectorCount">
            <summary>
            Number of reserved sectors.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.RootCluster">
            <summary>
            FAT32 root cluster.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.RootEntryCount">
            <summary>
            Number of root entrys.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.RootSector">
            <summary>
            FAT12/16 root sector.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.RootSectorCount">
            <summary>
            Number of root sectors.
            <para>
            For FAT12/16. In FAT32 this field remains 0.
            </para>
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.SectorsPerCluster">
            <summary>
            Number of sectors per cluster.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.TotalSectorCount">
            <summary>
            Total number of sectors.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.FatFileSystem.mFats">
            <summary>
            FATs array.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.FAT.FatFileSystem.Type">
            <summary>
            Get FAT type.
            <para>
            possible types:
            <list type="bullet">
            <item>Unknown.</item>
            <item>Fat12.</item>
            <item>Fat16.</item>
            <item>Fat32.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.#ctor(Cosmos.HAL.BlockDevice.Partition,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.System.FileSystem.FAT.FatFileSystem"/> class.
            </summary>
            <param name="aDevice">The partition.</param>
            <param name="aRootPath">The root path.</param>
            <param name="aSize">The partition size.</param>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aDevice is null.</item>
            <item>Thrown when FatFileSystem is null.</item>
            <item>Thrown on fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aRootPath is null.</item>
            <item>Thrown on fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown on fatal error (contact support).</item>
            <item>>FAT signature not found.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.GetFat(System.Int32)">
            <summary>
            Get FAT.
            </summary>
            <param name="aTableNumber">A table number to get.</param>
            <returns>FAT type.</returns>
            <exception cref="T:System.Exception">Thrown when FAT table number doesn't exist.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.NewBlockArray">
            <summary>
            Create new block array.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Read(System.Int64,System.Byte[]@,System.Int64,System.Int64)">
            <summary>
            Read data from cluster.
            </summary>
            <param name="aCluster">A cluster to read from.</param>
            <param name="aData">A data array to write the output to.</param>
            <param name="aSize">prob. unused.</param>
            <param name="aOffset">unused.</param>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Write(System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Write data to cluster.
            </summary>
            <param name="aCluster">A cluster to write to.</param>
            <param name="aData">A data to write.</param>
            <param name="aSize">prob. unused.</param>
            <param name="aOffset">The offset to write from.</param>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>aData length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.DisplayFileSystemInfo">
            <summary>
            Print filesystem info.
            </summary>
            <exception cref="!:IOException">Thrown on I/O error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.GetDirectoryListing(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Get list of sub-directories in a directory.
            </summary>
            <param name="baseDirectory">A base directory.</param>
            <returns>DirectoryEntry list.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when baseDirectory is null / memory error.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.GetRootDirectory">
            <summary>
            Get root directory.
            </summary>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when root directory address is smaller then root directory address.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when filesystem is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when root path is null or empty.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.CreateDirectory(Cosmos.System.FileSystem.Listing.DirectoryEntry,System.String)">
            <summary>
            Create directory.
            </summary>
            <param name="aParentDirectory">A parent directory.</param>
            <param name="aNewDirectory">A new directory name.</param>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aParentDirectory is null.</item>
            <item>aNewDirectory is null or empty.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error / unknown directory entry type.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type / memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.CreateFile(Cosmos.System.FileSystem.Listing.DirectoryEntry,System.String)">
            <summary>
            Create file.
            </summary>
            <param name="aParentDirectory">A parent directory.</param>
            <param name="aNewFile">A new file name.</param>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aParentDirectory is null.</item>
            <item>aNewFile is null or empty.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error / unknown directory entry type.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type / memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.DeleteDirectory(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Delete directory.
            </summary>
            <param name="aDirectoryEntry">A directory entry to delete.</param>
            <exception cref="T:System.NotImplementedException">Thrown when given entry type is unknown.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when tring to delete root directory.</item>
            <item>directory entry type is invalid.</item>
            <item>data size invalid.</item>
            <item>FAT table not found.</item>
            <item>out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aDirectoryEntry is null.</item>
            <item>aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>aData length is 0.</item>
            </list>
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.DeleteFile(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Delete file.
            </summary>
            <param name="aDirectoryEntry">A directory entry to delete.</param>
            <exception cref="T:System.NotImplementedException">Thrown when given entry type is unknown.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when tring to delete root directory.</item>
            <item>directory entry type is invalid.</item>
            <item>data size invalid.</item>
            <item>FAT table not found.</item>
            <item>out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when data lenght is greater then Int32.MaxValue.</item>
            <item>The number of clusters in the FAT entry is greater than Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aDirectoryEntry is null.</item>
            <item>aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>The size of the chain is less then zero.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when FAT type is unknown.</item>
            <item>aData length is 0.</item>
            </list>
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="P:Cosmos.System.FileSystem.FAT.FatFileSystem.Label">
            <summary>
            Get and set the root directory label.
            </summary>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>(get) Thrown when root path is null or empty.</item>
            <item>(set) Thrown when label is null or empty string.</item>
            <item>(set) aData length is 0.</item>
            <item>(get / set) memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>(get) Thrown when trying to access VolumeId out of Root Directory.</item>
            <item>(set) Thrown when entry metadata could not be changed.</item>
            <item>(get / set) Invalid entry type.</item>
            <item>(get / set) Invalid entry data size.</item>
            <item>(get / set) Invalid directory entry type.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>(get) Thrown when filesystem is null.</item>
            <item>(set) Thrown when entrys aValue is null.</item>
            <item>(set) Thrown when entrys aData is null.</item>
            <item>(get / set) Out of memory.</item>
            </list>
            </exception>
            <exception cref="!:EncoderFallbackException">Thrown when encoder fallback operation on aValue fails / memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aValue is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>(get) Thrown when root directory address is smaller then root directory address.</item>
            <item>(get) memory error.</item>
            <item>(set) Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>(set) Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
        </member>
        <member name="P:Cosmos.System.FileSystem.FAT.FatFileSystem.AvailableFreeSpace">
            <summary>
            Get size of free space available.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when filesystem is null.</exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when root path is null or empty.</item>
            <item>root directory entry data corrupted.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
        </member>
        <member name="P:Cosmos.System.FileSystem.FAT.FatFileSystem.TotalFreeSpace">
            <summary>
            Get total free space.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when filesystem is null.</exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when root path is null or empty.</item>
            <item>root directory entry data corrupted.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
        </member>
        <member name="T:Cosmos.System.FileSystem.FAT.FatFileSystem.FatTypeEnum">
            <summary>
            FAT types.
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatFileSystem.Format(System.String,System.Boolean)">
            <summary>
            Format drive. (delete all)
            </summary>
            <param name="aDriveFormat">unused.</param>
            <param name="aQuick">unused.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            <item>Fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when filesystem is null / memory error.</exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Data length is 0.</item>
            <item>Root path is null or empty.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when data size invalid.</item>
            <item>Thrown on unknown file system type.</item>
            <item>Thrown on fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.NotImplementedException">Thrown when FAT type is unknown.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="T:Cosmos.System.FileSystem.FAT.FatStream">
            <summary>
            FAT stream class.
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatStream.#ctor(Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.System.FileSystem.FAT.FatStream"/> class.
            </summary>
            <param name="aEntry">A directory entry to open stream to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when aEntry is null / corrupted.</exception>
            <exception cref="T:System.Exception">Thrown when FAT table not found or null / out of memory / invalid aData size.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the size of the chain is less then zero.</exception>
            <exception cref="T:System.OverflowException">Thrown when the number of clusters in the FAT entry is greater than Int32.MaxValue</exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
            <exception cref="T:System.ArgumentException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="P:Cosmos.System.FileSystem.FAT.FatStream.CanSeek">
            <summary>
            Check if can seek the stream.
            Returns true.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.FAT.FatStream.CanRead">
            <summary>
            Check if can read the stream.
            Returns true.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.FAT.FatStream.CanWrite">
            <summary>
            Check if can write the stream.
            Returns true.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.FAT.FatStream.Length">
            <summary>
            Get the length of the stream.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.FAT.FatStream.Position">
            <summary>
            Get and set the position in the stream.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">(set) Thrown when value is smaller than 0L.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatStream.Flush">
            <summary>
            Flush stream.
            Not implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek the position in the stream. 
            </summary>
            <param name="offset">The offset.</param>
            <param name="origin">The position in the stream to start the seek from.
            Possible values:
            <list type="bullet">
            <item>SeekOrigin.Begin</item>
            <item>SeekOrigin.Current</item>
            <item>SeekOrigin.End</item>
            </list>
            </param>
            <returns>long value.</returns>
            <exception cref="T:System.NotImplementedException">Thrown when invalid seek position in passed.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatStream.SetLength(System.Int64)">
            <summary>
            Set the length of the stream.
            </summary>
            <param name="value">Stream length.</param>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when trying to change root directory matadata.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>FAT table not found.</item>
            <item>out of memory.</item>
            <item>invalid aData size.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aValue is null.</item>
            <item>Thrown when entrys aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aValue is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            <item>Thrown when aSize is smaller than 0.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aName is null or empty string.</item>
            <item>aData length is 0.</item>
            <item>FAT type is unknown.</item>
            </list>
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data from stream.
            </summary>
            <param name="aBuffer">A destination buffer.</param>
            <param name="aOffset">A offset in the buffer.</param>
            <param name="aCount">Number of bytes to read.</param>
            <returns>int value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if aCount or aOffset is smaller than 0 or bigger than Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentException">Thrown on invalid offset length.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when aBuffer is null / memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error.</exception>
            <exception cref="T:System.InvalidCastException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.FatStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to stream.
            </summary>
            <param name="aBuffer">A source buffer.</param>
            <param name="aOffset">A offset in the buffer.</param>
            <param name="aCount">Number of bytes to read.</param>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when trying to change root directory matadata.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>FAT table not found.</item>
            <item>out of memory.</item>
            <item>invalid aData size.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aValue is null.</item>
            <item>Thrown when entrys aData is null.</item>
            <item>Thrown when aBuffer is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aValue is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown if aCount or aOffset is smaller than 0 or bigger than Int32.MaxValue.</item>
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            <item>Thrown when aSize is smaller than 0.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown on invalid offset length.</item>
            <item>Thrown when aName is null or empty string.</item>
            <item>aData length is 0.</item>
            <item>FAT type is unknown.</item>
            </list>
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="T:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryAttributeConsts">
            <summary>
            FAT file system directory entry file attributes.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryAttributeConsts.Test">
            <summary>
            Read only.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryAttributeConsts.Hidden">
            <summary>
            Hidden. Hidden directory.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryAttributeConsts.System">
            <summary>
            System. Indicates system directory.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryAttributeConsts.VolumeID">
            <summary>
            Volume Label. Indicates optional root directory label.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryAttributeConsts.Directory">
            <summary>
            Directory. Indicates the block is sub-directory.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryAttributeConsts.Archive">
            <summary>
            Archive.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryAttributeConsts.UnusedOrDeletedEntry">
            <summary>
            Unused or deleted directory.
            </summary>
        </member>
        <member name="T:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata">
            <summary>
            Fat directory entry metadata class.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.DataOffset">
            <summary>
            Entry data offset.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.DataLength">
            <summary>
            Entry data length.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.FirstByte">
            <summary>
            Directory entry first byte matadata. This is filename first byte.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.ShortName">
            <summary>
            Directory entry short name matadata. This is the filename + filename extension. 
            The dot '.' separate filename and filename extention is implied.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.Attributes">
            <summary>
            Directory entry attributes matadata. This contains information about the directory.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.NTReserved">
            <summary>
            Directory entry reserved matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.CreationTimeTenthsOfASecond">
            <summary>
            Directory entry creation time tenths of a second matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.CreationTime">
            <summary>
            Directory entry creation time matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.CreationDate">
            <summary>
            Directory entry creation date matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.AccessedDate">
            <summary>
            Directory entry last accessed date matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.FirstClusterHigh">
            <summary>
            Directory entry first cluster high matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.ModifiedTime">
            <summary>
            Directory entry last modified time matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.ModifiedDate">
            <summary>
            Directory entry last modified date matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.FirstClusterLow">
            <summary>
            Directory entry first cluster low matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.Size">
            <summary>
            Directory entry drectory size matadata.
            </summary>
        </member>
        <member name="T:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.LongFilenameEntryMetadata">
            <summary>
            Long filename entry metadata class. This class can not be inherited.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.LongFilenameEntryMetadata.SequenceNumberAndAllocationStatus">
            <summary>
            Directory entry sequence number and allocation status matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.LongFilenameEntryMetadata.LongName1">
            <summary>
            Directory entry LongName1 matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.LongFilenameEntryMetadata.Attributes">
            <summary>
            Directory entry attributes matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.LongFilenameEntryMetadata.Checksum">
            <summary>
            Directory entry checksum matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.LongFilenameEntryMetadata.LongName2">
            <summary>
            Directory entry LongName2 matadata.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata.LongFilenameEntryMetadata.LongName3">
            <summary>
            Directory entry LongName3 matadata.
            </summary>
        </member>
        <member name="T:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry">
            <summary>
            FatDirectoryEntry class. Represent directory/file.
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.#ctor(Cosmos.System.FileSystem.FAT.FatFileSystem,Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry,System.String,System.String,System.Int64,System.UInt32,System.UInt32,Cosmos.System.FileSystem.Listing.DirectoryEntryTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry"/> class.
            </summary>
            <param name="aFileSystem">The file system that contains the directory entry.</param>
            <param name="aParent">The parent directory entry or null if the current entry is the root.</param>
            <param name="aFullPath">The full path to the entry.</param>
            <param name="aName">The entry name.</param>
            <param name="aSize">The size of the entry.</param>
            <param name="aFirstCluster">The first cluster of the entry.</param>
            <param name="aEntryHeaderDataOffset">The entry header data offset.</param>
            <param name="aEntryType">The entry type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when first cluster smaller then file system root cluster.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when aFileSystem is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when aFullPath or aName is null or empty.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.#ctor(Cosmos.System.FileSystem.FAT.FatFileSystem,Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry,System.String,System.Int64,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry"/> class.
            </summary>
            <param name="aFileSystem">The file system that contains the directory entry.</param>
            <param name="aParent">The parent directory entry or null if the current entry is the root.</param>
            <param name="aFullPath">The full path to the entry.</param>
            <param name="aName">The entry name.</param>
            <param name="aSize">The size of the entry.</param>
            <param name="aFirstCluster">The first cluster of the entry.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when first cluster smaller then file system root cluster.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when aFileSystem is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when aFullPath or aName is null or empty.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.GetFatTable">
            <summary>
            Get FAT table.
            </summary>
            <returns>An array of cluster numbers for the FAT chain.</returns>
            <exception cref="T:System.Exception">Thrown when FAT table not found / out of memory / invalid aData size.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the size of the chain is less then zero.</exception>
            <exception cref="T:System.OverflowException">Thrown when the number of clusters in the FAT entry is greater than Int32.MaxValue</exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
            <exception cref="T:System.ArgumentException">Thrown when FAT type is unknown.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when aData is null.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.GetFileSystem">
            <summary>
            Get file system.
            </summary>
            <returns>File system.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.GetFileStream">
            <summary>
            Get file stream.
            </summary>
            <returns>File stream. null if object is not a file.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when this object is null.</exception>
            <exception cref="T:System.Exception">Thrown when FAT table not found / out of memory.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the size of the chain is less then zero. (Never thrown)</exception>
            <exception cref="T:System.OverflowException">Thrown when the number of clusters in the FAT entry is greater than Int32.MaxValue</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.SetName(System.String)">
            <summary>
            Set name.
            </summary>
            <param name="aName">A name to set to the entry.</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aName is null or empty string.</item>
            <item>aData length is 0.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when entry metadata could not be changed.</item>
            <item>Invalid entry type.</item>
            <item>Invalid entry data size.</item>
            <item>Invalid directory entry type.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aValue is null.</item>
            <item>Thrown when entrys aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">Thrown when encoder fallback operation on aValue fails.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aValue is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.SetSize(System.Int64)">
            <summary>
            Set the size of the entry.
            </summary>
            <param name="aSize">The size of the entry.</param>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when trying to change root directory matadata.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aValue is null.</item>
            <item>Thrown when entrys aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aValue is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            <item>Thrown when aSize is smaller than 0.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aName is null or empty string.</item>
            <item>aData length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.AllocateDirectoryEntry(System.String)">
            <summary>
            Allocate directory entry.
            </summary>
            <param name="aShortName">A short name to set to the entry.</param>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when trying to change root directory matadata.</item>
            <item>FAT table not found</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">Thrown when encoder fallback operation on aValue fails.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aValue is null.</item>
            <item>Thrown when entrys aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aValue is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aName is null or empty string.</item>
            <item>aData length is 0.</item>
            </list>
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.AddDirectoryEntry(System.String,Cosmos.System.FileSystem.Listing.DirectoryEntryTypeEnum)">
            <summary>
            Add directory entry.
            </summary>
            <param name="aName">A name of the directory entry.</param>
            <param name="aEntryType">A type of the directory entry.</param>
            <returns>FatDirectoryEntry.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error / unknown directory entry type.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type / memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.Text.DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.IsRootDirectory">
            <summary>
            Check if given entry is a root directory.
            </summary>
            <returns>True if it is root directory.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.DeleteDirectoryEntry">
            <summary>
            Delete directory entry.
            </summary>
            <exception cref="T:System.NotImplementedException">Thrown when given entry type is unknown.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when tring to delete root directory.</item>
            <item>directory entry type is invalid.</item>
            <item>data size invalid.</item>
            <item>FAT table not found.</item>
            <item>out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>aData length is 0.</item>
            </list>
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.ReadDirectoryContents(System.Boolean)">
            <summary>
            Retrieves a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry"/> objects that represent the Directory Entries inside this Directory
            </summary>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> of the Directory Entries inside this Directory</returns>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
            <exception cref="T:System.Text.DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.FindVolumeId">
            <summary>
            Get volume id
            </summary>
            <returns>FatDirectoryEntry.</returns>
            <exception cref="T:System.Exception">Thrown when trying to access VolumeId out of Root Directory / data size invalid / invalid directory entry type.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.Text.DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown on memory error / FileSystem is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.CreateVolumeId(System.String)">
            <summary>
            Create volume id.
            </summary>
            <param name="name">A name of the entry.</param>
            <returns>Volume ID.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error / unknown directory entry type.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when called on a directory other then root / data size invalid / invalid directory entry type / memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.Text.DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.GetNextUnallocatedDirectoryEntry">
            <summary>
            Tries to find an empty space for a directory entry and returns the offset to that space if successful, otherwise throws an exception.
            </summary>
            <returns>Returns the offset to the next unallocated directory entry.</returns>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when unallocated memory block not found / invalid directory entry type.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.GetNextUnallocatedDirectoryEntries(System.Int32)">
            <summary>
            Tries to find an empty space for the specified number of directory entries and returns an array of offsets to those spaces if successful, otherwise throws an exception.
            </summary>
            <param name="aEntryCount">The number of entried to allocate.</param>
            <returns>Returns an array of offsets to the next unallocated directory entries.</returns>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when requested memory block of the size of aEntryCount not found / invalid directory entry type.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.GetDirectoryEntryData">
            <summary>
            Get directory entry data.
            </summary>
            <returns>byte array.</returns>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.SetDirectoryEntryData(System.Byte[])">
            <summary>
            Set directory entry data.
            </summary>
            <param name="aData">A data to set to the directory entry.</param>
            <exception cref="T:System.Exception">Thrown when directory entry type is invalid.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>aData length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.SetDirectoryEntryMetadataValue(Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata,System.Byte)">
            <summary>
            Set directory entry metadata value.
            </summary>
            <param name="aEntryMetadata">A entry metadata</param>
            <param name="aValue">A byte value</param>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when trying to change root directory matadata.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aValue is null.</item>
            <item>Thrown when entrys aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aValue is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aName is null or empty string.</item>
            <item>aData length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.SetDirectoryEntryMetadataValue(Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata,System.UInt16)">
            <summary>
            Set directory entry metadata value.
            </summary>
            <param name="aEntryMetadata">A entry metadata</param>
            <param name="aValue">A ushort value</param>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when trying to change root directory matadata.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aValue is null.</item>
            <item>Thrown when entrys aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aValue is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aName is null or empty string.</item>
            <item>aData length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.SetDirectoryEntryMetadataValue(Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata,System.UInt32)">
            <summary>
            Set directory entry metadata value.
            </summary>
            <param name="aEntryMetadata">A entry metadata</param>
            <param name="aValue">A uint value</param>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when trying to change root directory matadata.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aValue is null.</item>
            <item>Thrown when entrys aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aValue is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aName is null or empty string.</item>
            <item>aData length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.SetDirectoryEntryMetadataValue(Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata,System.Int64)">
            <summary>
            Set directory entry metadata value.
            </summary>
            <param name="aEntryMetadata">A entry metadata</param>
            <param name="aValue">A long value</param>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when trying to change root directory matadata.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aValue is null.</item>
            <item>Thrown when entrys aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aValue is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aName is null or empty string.</item>
            <item>aData length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.SetDirectoryEntryMetadataValue(Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata,System.String)">
            <summary>
            Set directory entry metadata value.
            </summary>
            <param name="aEntryMetadata">A entry metadata</param>
            <param name="aValue">A string value</param>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when trying to change root directory matadata.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">Thrown when encoder fallback operation on aValue fails.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when entrys aValue is null.</item>
            <item>Thrown when entrys aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aValue is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aName is null or empty string.</item>
            <item>aData length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.SetLongFilenameEntryMetadataValue(System.UInt32,Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata,System.UInt32)">
            <summary>
            Set long filename entry metadata value.
            </summary>
            <param name="aEntryHeaderDataOffset">A entry header data offset.</param>
            <param name="aEntryMetadata">A matadata object.</param>
            <param name="aValue">A uint value to set.</param>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>aData length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.SetLongFilenameEntryMetadataValue(System.UInt32,Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata,System.Int64)">
            <summary>
            Set long filename entry metadata value.
            </summary>
            <param name="aEntryHeaderDataOffset">A entry header data offset.</param>
            <param name="aEntryMetadata">A matadata object.</param>
            <param name="aValue">A long value to set.</param>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>aData length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.SetLongFilenameEntryMetadataValue(System.UInt32,Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntryMetadata,System.String)">
            <summary>
            Set long filename entry metadata value.
            </summary>
            <param name="aEntryHeaderDataOffset">A entry header data offset.</param>
            <param name="aEntryMetadata">A matadata object.</param>
            <param name="aValue">A string value to set.</param>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">Thrown when encoder fallback operation on aValue fails.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>aData length is 0.</item>
            </list>
            </exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.GetShortName(System.String)">
            <summary>
            Gets the short filename to be written to the FAT directory entry.
            </summary>
            <param name="aShortName">The short filename.</param>
            <returns>Returns the short filename to be written to the FAT directory entry.</returns>
            <exception cref="T:System.OverflowException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.CalculateChecksum(System.String)">
            <summary>
            Calculates the checksum for a given short filename.
            </summary>
            <param name="aShortName">The short filename without the extension period.</param>
            <returns>Returns the checksum for the given short filename.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.GetDirectoryEntrySize(System.Byte[])">
            <summary>
            Get directory entry size.
            </summary>
            <param name="DirectoryEntryData">Directory entry data.</param>
            <returns>long value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when DirectoryEntryData array is too short.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when DirectoryEntryData array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FAT.Listing.FatDirectoryEntry.GetUsedSpace">
            <summary>
            Get used space on directory.
            </summary>
            <returns>long value, space used (bytes)</returns>
            <exception cref="T:System.ArgumentException">Thrown when directory entry data corrupted.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when directory entry data is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid.</exception>
        </member>
        <member name="T:Cosmos.System.FileSystem.FileSystem">
            <summary>
            FileSystem abstract class.
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.FileSystem.#ctor(Cosmos.HAL.BlockDevice.Partition,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.System.FileSystem.FileSystem"/> class.
            </summary>
            <param name="aDevice">A partiton managed by the filesystem.</param>
            <param name="aRootPath">A root path.</param>
            <param name="aSize">A partition size.</param>
        </member>
        <member name="M:Cosmos.System.FileSystem.FileSystem.DisplayFileSystemInfo">
            <summary>
            Print filesystem info.
            </summary>
            <exception cref="T:System.IO.IOException">Thrown on I/O error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FileSystem.GetDirectoryListing(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Get list of sub-directories in a directory.
            </summary>
            <param name="baseDirectory">A base directory.</param>
            <returns>DirectoryEntry list.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when baseDirectory is null / memory error.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FileSystem.GetRootDirectory">
            <summary>
            Get root directory.
            </summary>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when root directory address is smaller then root directory address.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when filesystem is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when root path is null or empty.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FileSystem.CreateDirectory(Cosmos.System.FileSystem.Listing.DirectoryEntry,System.String)">
            <summary>
            Create directory.
            </summary>
            <param name="aParentDirectory">A parent directory.</param>
            <param name="aNewDirectory">A new directory name.</param>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aParentDirectory is null.</item>
            <item>aNewDirectory is null or empty.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error / unknown directory entry type.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type / memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FileSystem.CreateFile(Cosmos.System.FileSystem.Listing.DirectoryEntry,System.String)">
            <summary>
            Create file.
            </summary>
            <param name="aParentDirectory">A parent directory.</param>
            <param name="aNewFile">A new file name.</param>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aParentDirectory is null.</item>
            <item>aNewFile is null or empty.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error / unknown directory entry type.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">Thrown when data size invalid / invalid directory entry type / memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FileSystem.DeleteDirectory(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Delete directory.
            </summary>
            <param name="aDirectoryEntry">A directory entry to delete.</param>
            <exception cref="T:System.NotImplementedException">Thrown when given entry type is unknown.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when tring to delete root directory.</item>
            <item>directory entry type is invalid.</item>
            <item>data size invalid.</item>
            <item>FAT table not found.</item>
            <item>out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aDirectoryEntry is null.</item>
            <item>aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>aData length is 0.</item>
            </list>
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.FileSystem.DeleteFile(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Delete file.
            </summary>
            <param name="aDirectoryEntry">A directory entry to delete.</param>
            <exception cref="T:System.NotImplementedException">Thrown when given entry type is unknown.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when tring to delete root directory.</item>
            <item>directory entry type is invalid.</item>
            <item>data size invalid.</item>
            <item>FAT table not found.</item>
            <item>out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when data lenght is greater then Int32.MaxValue.</item>
            <item>The number of clusters in the FAT entry is greater than Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown when aDirectoryEntry is null.</item>
            <item>aData is null.</item>
            <item>Out of memory.</item>
            </list>
            </exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>The size of the chain is less then zero.</item>
            <item>Entrys matadata offset value is invalid.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when FAT type is unknown.</item>
            <item>aData length is 0.</item>
            </list>
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="P:Cosmos.System.FileSystem.FileSystem.Device">
            <summary>
            Get device.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.FileSystem.RootPath">
            <summary>
            Get root path.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.FileSystem.Size">
            <summary>
            Get size.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.FileSystem.AvailableFreeSpace">
            <summary>
            Get available free space.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.FileSystem.TotalFreeSpace">
            <summary>
            Get total free space.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.FileSystem.Type">
            <summary>
            Get type.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.FileSystem.Label">
            <summary>
            Get label.
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.FileSystem.Format(System.String,System.Boolean)">
            <summary>
            Format drive. (delete all)
            </summary>
            <param name="aDriveFormat">unused.</param>
            <param name="aQuick">unused.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            <item>Fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when filesystem is null / memory error.</exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Data length is 0.</item>
            <item>Root path is null or empty.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when data size invalid.</item>
            <item>Thrown on unknown file system type.</item>
            <item>Thrown on fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.NotImplementedException">Thrown when FAT type is unknown.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="P:Cosmos.System.FileSystem.FileSystemFactory.Name">
            <summary>
            Get the name of the file system.
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.FileSystemFactory.IsType(Cosmos.HAL.BlockDevice.Partition)">
            <summary>
            Checks if the file system can handle the partition.
            </summary>
            <param name="aDevice">The partition.</param>
            <returns>Returns true if the file system can handle the partition, false otherwise.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.FileSystemFactory.Create(Cosmos.HAL.BlockDevice.Partition,System.String,System.Int64)">
            <summary>
            Creates a new <see cref="T:Cosmos.System.FileSystem.FileSystem"/> object for the given partition, root path, and size.
            </summary>
            <param name="aDevice">The partition.</param>
            <param name="aRootPath">The root path.</param>
            <param name="aSize">The size, in MB.</param>
            <returns>FileSystem value.</returns>
        </member>
        <member name="T:Cosmos.System.FileSystem.FileSystemType">
            <summary>
            File system type.
            </summary>
        </member>
        <member name="T:Cosmos.System.FileSystem.Listing.DirectoryEntryTypeEnum">
            <summary>
            Enumeration for the directory entry type.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.Listing.DirectoryEntryTypeEnum.Directory">
            <summary>
            Directory
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.Listing.DirectoryEntryTypeEnum.File">
            <summary>
            File
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.Listing.DirectoryEntryTypeEnum.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Cosmos.System.FileSystem.Listing.DirectoryEntry">
            <summary>
            A generic file system directory entry.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.Listing.DirectoryEntry.mSize">
            <summary>
            Entry size.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.Listing.DirectoryEntry.mFullPath">
            <summary>
            Entry full path.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.Listing.DirectoryEntry.mName">
            <summary>
            Entry name.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.Listing.DirectoryEntry.mParent">
            <summary>
            Entry parent.
            </summary>
        </member>
        <member name="F:Cosmos.System.FileSystem.Listing.DirectoryEntry.mEntryType">
            <summary>
            Entry type.
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.Listing.DirectoryEntry.#ctor(Cosmos.System.FileSystem.FileSystem,Cosmos.System.FileSystem.Listing.DirectoryEntry,System.String,System.String,System.Int64,Cosmos.System.FileSystem.Listing.DirectoryEntryTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.System.FileSystem.Listing.DirectoryEntry"/> class.
            </summary>
            <param name="aFileSystem">The file system that contains the directory entry.</param>
            <param name="aParent">The parent directory entry or null if the current entry is the root.</param>
            <param name="aFullPath">The full path to the entry.</param>
            <param name="aName">The entry name.</param>
            <param name="aSize">The size of the entry.</param>
            <param name="aEntryType">The ype of the entry.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if aFileSystem is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if aFullPath / aName is null.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.Listing.DirectoryEntry.SetName(System.String)">
            <summary>
            Set entry name.
            </summary>
            <param name="aName">A name to be set.</param>
        </member>
        <member name="M:Cosmos.System.FileSystem.Listing.DirectoryEntry.SetSize(System.Int64)">
            <summary>
            Set entry size.
            </summary>
            <param name="aSize">A size to be set.</param>
        </member>
        <member name="M:Cosmos.System.FileSystem.Listing.DirectoryEntry.GetFileStream">
            <summary>
            Get file stream.
            </summary>
            <returns>Stream value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.Listing.DirectoryEntry.GetUsedSpace">
            <summary>
            Get used space.
            </summary>
            <returns>long value.</returns>
        </member>
        <member name="T:Cosmos.System.FileSystem.VFS.VFSBase">
            <summary>
            Virtual file system base abstract class. 
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.Initialize">
            <summary>
            Initializes the <see cref="T:Cosmos.System.FileSystem.VFS.VFSBase"/> system.
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.RegisterFileSystem(Cosmos.System.FileSystem.FileSystemFactory)">
            <summary>
            Register file system.
            </summary>
            <param name="aFileSystemFactory">A file system to register.</param>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.CreateFile(System.String)">
            <summary>
            Create File.
            </summary>
            <param name="aPath">A path to the file.</param>
            <returns>DirectoryEntry value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.CreateDirectory(System.String)">
            <summary>
            Create directory.
            </summary>
            <param name="aPath">A path to the directory.</param>
            <returns>DirectoryEntry value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.DeleteFile(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Delete File.
            </summary>
            <param name="aPath">A path to the file.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.DeleteDirectory(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Delete directory.
            </summary>
            <param name="aPath">A path to the directory.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetDirectory(System.String)">
            <summary>
            Get directory.
            </summary>
            <param name="aPath">A path to the directory.</param>
            <returns>DirectoryEntry value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetFile(System.String)">
            <summary>
            Get file.
            </summary>
            <param name="aPath">A path to the file.</param>
            <returns>DirectoryEntry value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetDirectoryListing(System.String)">
            <summary>
            Get directory listing.
            </summary>
            <param name="aPath">A path to the entry.</param>
            <returns>DirectoryEntry list value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetDirectoryListing(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Get directory listing.
            </summary>
            <param name="aEntry">A entry.</param>
            <returns>DirectoryEntry list value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetVolume(System.String)">
            <summary>
            Get volume.
            </summary>
            <param name="aVolume">A volume root path.</param>
            <returns>DirectoryEntry value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetVolumes">
            <summary>
            Get list of directory entrys for all volumes.
            </summary>
            <returns>DirectoryEntry list value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetFileAttributes(System.String)">
            <summary>
            Gets the attributes for a File / Directory.
            </summary>
            <param name="aPath">The path of the File / Directory.</param>
            <returns>FileAttributes value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.SetFileAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes for a File / Directory.
            </summary>
            <param name="aPath">The path of the File / Directory.</param>
            <param name="fileAttributes">The attributes of the File / Directory.</param>
        </member>
        <member name="P:Cosmos.System.FileSystem.VFS.VFSBase.DirectorySeparatorChar">
            <summary>
            Get the directory separator char.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.VFS.VFSBase.AltDirectorySeparatorChar">
            <summary>
            Get the alt. directory separator char.
            </summary>
        </member>
        <member name="P:Cosmos.System.FileSystem.VFS.VFSBase.VolumeSeparatorChar">
            <summary>
            Get the volume separator char.
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.IsValidDriveId(System.String)">
            <summary>
            Check if drive id is valid.
            </summary>
            <param name="driveId">Drive id to check.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetTotalSize(System.String)">
            <summary>
            Get the total size of the partition.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <returns>long value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetAvailableFreeSpace(System.String)">
            <summary>
            Get avilable free space in the partition.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <returns>long value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetTotalFreeSpace(System.String)">
            <summary>
            Get total free space in the partition.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <returns>long value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetFileSystemType(System.String)">
            <summary>
            Get file system type.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <returns>string value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.GetFileSystemLabel(System.String)">
            <summary>
            Get file system label.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <returns>string value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.SetFileSystemLabel(System.String,System.String)">
            <summary>
            Set file system type.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <param name="aLabel">A label to be set.</param>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSBase.Format(System.String,System.String,System.Boolean)">
            <summary>
            Format partition.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <param name="aDriveFormat">A drive format.</param>
            <param name="aQuick">Quick format.</param>
        </member>
        <member name="T:Cosmos.System.FileSystem.VFS.VFSManager">
            <summary>
            VFSManager (Virtual File System Manager) class. Used to manage files and directories.
            </summary>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.RegisterVFS(Cosmos.System.FileSystem.VFS.VFSBase)">
            <summary>
            Register VFS. Initialize the VFS.
            </summary>
            <param name="aVFS">A VFS to register.</param>
            <exception cref="T:System.Exception">Thrown if VFS already registered / memory error.</exception>
            <exception cref="T:System.IO.IOException">Thrown on I/O exception.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown on memory error.</exception>
            <exception cref="T:System.OverflowException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.PathTooLongException">Thrown on fatal error.</exception>
            <exception cref="!:System.Security.SecurityException">Thrown on fatal error.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown on fatal error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.CreateFile(System.String)">
            <summary>
            Create a file.
            </summary>
            <param name="aPath">A path to the file.</param>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if aPath is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if aPath is empty or contains invalid chars.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when the entry at aPath is not a file.</item>
            <item>Thrown when the parent directory of aPath is not a directory.</item>
            </list>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">Thrown when aPath is longer than the system defined max lenght.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.DeleteFile(System.String)">
            <summary>
            Delete a file.
            </summary>
            <param name="aPath">A path to the file.</param>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown if VFS manager is null.</item>
            <item>The entry at aPath is not a file.</item>
            </list>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the specified path isn't a file</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetFile(System.String)">
            <summary>
            Get file.
            </summary>
            <param name="aPath">A path to the file.</param>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath is null / empty / invalid.</item>
            <item>Root path is null or empty.</item>
            <item>Memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if aPath is null or empty.</item>
            <item>Filesystem is null.</item>
            <item>Root directory is null.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item>Thrown when root directory address is smaller then root directory address.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when aPath is too deep.</item>
            <item>Data lenght is greater then Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when unable to determine filesystem for path:  + aPath.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>path not found.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.CreateDirectory(System.String)">
            <summary>
            Create directory.
            </summary>
            <param name="aPath">A path to the directory.</param>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if aPath is null / empty / invalid.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error / unknown directory entry type.</exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>the entry at aPath is not a directory.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath length is zero.</item>
            <item>Thrown if aPath is invalid.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.PathTooLongException">Thrown when The aPath is longer than the system defined maximum length.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Delete directory.
            </summary>
            <param name="aPath">A path to the directory.</param>
            <param name="recursive">Recursive delete (not empty directory).</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath is null or empty.</item>
            <item>Memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if VFSManager is null.</item>
            <item>Root directory is null.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item>Thrown when root directory address is smaller then root directory address.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when aPath is too deep.</item>
            <item>Data lenght is greater then Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown if VFSManager is null.</item>
            <item>Thrown when unable to determine filesystem for path:  + aPath.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>path not found.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.IOException">Thrown if specified path isn't a directory / trying to delete not empty directory not recursivly / directory contains a corrupted file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when trying to delete unknown type entry.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetDirectory(System.String)">
            <summary>
            Get directory.
            </summary>
            <param name="aPath">A path to the directory.</param>
            <returns>DirectoryEntry value.</returns>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath is null or empty.</item>
            <item>Root path is null or empty.</item>
            <item>Memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if VFSManager is null.</item>
            <item>Thrown if aPath is null.</item>
            <item>Root directory is null.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item>Thrown when root directory address is smaller then root directory address.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when aPath is too deep.</item>
            <item>Data lenght is greater then Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when unable to determine filesystem for path:  + aPath.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>path not found.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetDirectoryListing(System.String)">
            <summary>
            Get directory listing.
            </summary>
            <param name="aPath">A path to the entry.</param>
            <returns>DirectoryEntry list value.</returns>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath is null or empty.</item>
            <item>Root path is null or empty.</item>
            <item>Memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if aPath is null or empty.</item>
            <item>Filesystem is null.</item>
            <item>Root directory is null.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item>Thrown when root directory address is smaller then root directory address.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when aPath is too deep.</item>
            <item>Data lenght is greater then Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when unable to determine filesystem for path:  + aPath.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>path not found.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetVolume(System.String)">
            <summary>
            Get volume.
            </summary>
            <param name="aVolume">The volume root path.</param>
            <returns>A directory entry for the volume.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aVolume is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aVolume</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if aVolume / filesystem is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when root directory address is smaller then root directory address.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetVolumes">
            <summary>
            Gets the volumes for all registered file systems.
            </summary>
            <returns>A list of directory entries for all volumes.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if filesystem is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when root directory address is smaller then root directory address.</exception>
            <exception cref="T:System.ArgumentException">Thrown when root path is null or empty.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.RegisterFileSystem(Cosmos.System.FileSystem.FileSystemFactory)">
            <summary>
            Register file system.
            </summary>
            <param name="aFileSystemFactory">A file system to register.</param>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetLogicalDrives">
            <summary>
            Get logical drivers list.
            </summary>
            <returns>List of strings value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if filesystem is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when root directory address is smaller then root directory address.</exception>
            <exception cref="T:System.ArgumentException">Thrown when root path is null or empty.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.InternalGetFileDirectoryNames(System.String,System.String,System.String,System.Boolean,System.Boolean,System.IO.SearchOption)">
            <summary>
            Get file directory names.
            Not implemented.
            </summary>
            <param name="path">unused.</param>
            <param name="userPathOriginal">unused.</param>
            <param name="searchPattern">unused.</param>
            <param name="includeFiles">unused.</param>
            <param name="includeDirs">unused.</param>
            <param name="searchOption">unused.</param>
            <returns>null.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.FileExists(System.String)">
            <summary>
            Check if file exists.
            </summary>
            <param name="aPath">A path to the file.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.FileExists(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Check if file exists.
            </summary>
            <param name="aEntry">A entry of the file.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.DirectoryExists(System.String)">
            <summary>
            Check if directory exists.
            </summary>
            <param name="aPath">A path to the directory.</param>
            <returns>bool value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aPath is null or empty.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.DirectoryExists(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Check if directory exists.
            </summary>
            <param name="aEntry">A entry of the directory.</param>
            <returns>bool value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when aEntry is null.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetFullPath(Cosmos.System.FileSystem.Listing.DirectoryEntry)">
            <summary>
            Get full path to the entry.
            </summary>
            <param name="aEntry">A entry.</param>
            <returns>string value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when aEntry is null.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetFileStream(System.String)">
            <summary>
            Get file stream.
            </summary>
            <param name="aPathname">A path to the file.</param>
            <returns>Stream value.</returns>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPathname is null / empty / invalid.</item>
            <item>Root path is null or empty.</item>
            <item>Memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if aPathname is null or empty.</item>
            <item>Filesystem is null.</item>
            <item>Root directory is null.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item>Thrown when root directory address is smaller then root directory address.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when aPathname is too deep.</item>
            <item>Data lenght is greater then Int32.MaxValue.</item>
            <item>The number of clusters in the FAT entry is greater than Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when unable to determine filesystem for path:  + aPathname.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>path not found.</item>
            <item>FAT table not found.</item>
            <item>memory error.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetFileAttributes(System.String)">
            <summary>
            Get file attributes.
            </summary>
            <param name="aPath">A path to the file</param>
            <returns>FileAttributes value.</returns>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath is null or empty.</item>
            <item>Thrown when aFS root path is null or empty.</item>
            <item>Thrown on memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if VFSManager is null.</item>
            <item>Thrown when root directory is null.</item>
            <item>Thrown on memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item>Thrown when root directory address is smaller then root directory address.</item>
            <item>Thrown on memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when aPath is too deep.</item>
            <item>Thrown when data lenght is greater then Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when data size invalid.</item>
            <item>Thrown on invalid directory entry type.</item>
            <item>Thrown when aPath entry not found.</item>
            <item>Thrown when unable to determine filesystem for path:  + aPath.</item>
            <item>Thrown aPath is neither a file neither a directory.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.SetFileAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes for a File / Directory.
            Not implemented.
            </summary>
            <param name="aPath">The path of the File / Directory.</param>
            <param name="fileAttributes">The attributes of the File / Directory.</param>
            <exception cref="T:System.NotImplementedException">Thrown always</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.IsValidDriveId(System.String)">
            <summary>
            Check if drive id is valid.
            </summary>
            <param name="driveId">Drive id to check.</param>
            <returns>bool value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if aPath length is smaller then 2, or greater than Int32.MaxValue.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetTotalSize(System.String)">
            <summary>
            Get total size in bytes.
            </summary>
            <param name="aDriveId">A drive id to get the size of.</param>
            <returns>long value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetAvailableFreeSpace(System.String)">
            <summary>
            Get available free space.
            </summary>
            <param name="aDriveId">A drive id to get the size of.</param>
            <returns>long value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetTotalFreeSpace(System.String)">
            <summary>
            Get total free space.
            </summary>
            <param name="aDriveId">A drive id to get the size of.</param>
            <returns>long value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetFileSystemType(System.String)">
            <summary>
            Get file system type.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <returns>string value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetFileSystemLabel(System.String)">
            <summary>
            Get file system label.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <returns>string value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.SetFileSystemLabel(System.String,System.String)">
            <summary>
            Set file system type.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <param name="aLabel">A label to be set.</param>
            <exception cref="T:System.ArgumentException">Thrown when aDriveId is null or empty.</exception>
            <exception cref="T:System.Exception">Unable to determine filesystem for path:  + aDriveId</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.Format(System.String,System.String,System.Boolean)">
            <summary>
            Format partition.
            </summary>
            <param name="aDriveId">A drive id.</param>
            <param name="aDriveFormat">A drive format.</param>
            <param name="aQuick">Quick format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type = "bullet" >
            <item>Thrown when the data length is 0 or greater then Int32.MaxValue.</item>
            <item>Entrys matadata offset value is invalid.</item>
            <item>Fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when filesystem is null / memory error.</exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown when aDriveId is null or empty.</item>
            <item>Data length is 0.</item>
            <item>Root path is null or empty.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Unable to determine filesystem for path:  + aDriveId.</item>
            <item>Thrown when data size invalid.</item>
            <item>Thrown on unknown file system type.</item>
            <item>Thrown on fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">Thrown when data lenght is greater then Int32.MaxValue.</exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
            <exception cref="T:System.NotImplementedException">Thrown when FAT type is unknown.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the data in aData is corrupted.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when FAT type is unknown.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetAltDirectorySeparatorChar">
            <summary>
            Get alt. directory separator char.
            </summary>
            <returns>char value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetDirectorySeparatorChar">
            <summary>
            Get directory separator char.
            </summary>
            <returns>char value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetInvalidFileNameChars">
            <summary>
            Get invalid filename chars.
            </summary>
            <returns>char array value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetInvalidPathCharsWithAdditionalChecks">
            <summary>
            Get invalid path chars with additional checks.
            </summary>
            <returns>char array value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetPathSeparator">
            <summary>
            Get path separator char.
            </summary>
            <returns>char value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetRealInvalidPathChars">
            <summary>
            Get real invalid path chars.
            </summary>
            <returns>char array value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetTrimEndChars">
            <summary>
            Get trim end chars.
            </summary>
            <returns>char array value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetVolumeSeparatorChar">
            <summary>
            Get volume separator char.
            </summary>
            <returns>char value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetMaxPath">
            <summary>
            Get max path.
            </summary>
            <returns>int value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.SplitPath(System.String)">
            <summary>
            Split path.
            </summary>
            <param name="aPath">A path to split.</param>
            <returns>string array.</returns>
            <exception cref="T:System.ArgumentException">Thrown on fatal error.</exception>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetDirectorySeparators">
            <summary>
            Get directory separators.
            </summary>
            <returns>char array value.</returns>
        </member>
        <member name="M:Cosmos.System.FileSystem.VFS.VFSManager.GetParent(System.String)">
            <summary>
            Gets the parent directory entry from the path.
            </summary>
            <param name="aPath">The full path to the current directory entry.</param>
            <returns>The parent directory entry.</returns>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if aPath is null / empty / invalid.</item>
            <item>Root path is null or empty.</item>
            <item>Memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if VFSManager is null.</item>
            <item>Thrown if aPath is null.</item>
            <item>Root directory is null.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item>Thrown when root directory address is smaller then root directory address.</item>
            <item>Memory error.</item>
            <item>Fatal error.</item>
            </list>
            </exception>
            <exception cref="T:System.OverflowException">
            <list type="bullet">
            <item>Thrown when aPath is too deep.</item>
            <item>Data lenght is greater then Int32.MaxValue.</item>
            </list>
            </exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown when unable to determine filesystem for path:  + aPath.</item>
            <item>data size invalid.</item>
            <item>invalid directory entry type.</item>
            <item>path not found.</item>
            </list>
            </exception>
            <exception cref="!:DecoderFallbackException">Thrown on memory error.</exception>
        </member>
        <member name="T:Cosmos.System.Global">
            <summary>
            Cosmos global class.
            Used to init the console, screen and debugger and get/set keyboard keys.
            </summary>
        </member>
        <member name="M:Cosmos.System.Global.#cctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Global"/> class.
            </summary>
        </member>
        <member name="F:Cosmos.System.Global.mDebugger">
            <summary>
            System ring debugger instance, with the tag "Global".
            </summary>
        </member>
        <member name="F:Cosmos.System.Global.mFileSystemDebugger">
            <summary>
            System ring debugger instance, with the tag "FileSystem".
            </summary>
        </member>
        <member name="F:Cosmos.System.Global.Console">
            <summary>
            Console instance.
            </summary>
        </member>
        <member name="P:Cosmos.System.Global.NumLock">
            <summary>
            Get and set keyboard NumLock value.
            </summary>
        </member>
        <member name="P:Cosmos.System.Global.CapsLock">
            <summary>
            Get and set keyboard CapsLock value.
            </summary>
        </member>
        <member name="P:Cosmos.System.Global.ScrollLock">
            <summary>
            Get and set keyboard ScrollLock value.
            </summary>
        </member>
        <member name="M:Cosmos.System.Global.Init(Cosmos.HAL.TextScreenBase)">
            <summary>
            Init console, screen and keyboard.
            </summary>
            <param name="textScreen">A screen device.</param>
        </member>
        <member name="M:Cosmos.System.Global.ChangeKeyLayout(Cosmos.System.ScanMapBase)">
            <summary>
            Change keyboard layout. Initially set to US_Standard.
            <para>
            Currently available:
            <list type="bullet">
            <item>US_Standard.</item>
            <item>FR_Standard.</item>
            <item>DE_Standard.</item>
            <item>TR_StandardQ.</item>
            </list>
            </para>
            </summary>
            <param name="scanMap">A key mapping.</param>
        </member>
        <member name="T:Cosmos.System.Graphics.Bitmap">
            <summary>
            Bitmap class, used to represent image of the type of Bitmap. See also: <seealso cref="T:Cosmos.System.Graphics.Image"/>.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.Bitmap.#ctor(System.UInt32,System.UInt32,Cosmos.System.Graphics.ColorDepth)">
            <summary>
            Create new instance of <see cref="T:Cosmos.System.Graphics.Bitmap"/> class.
            </summary>
            <param name="Width">Image width (greater then 0).</param>
            <param name="Height">Image height (greater then 0).</param>
            <param name="colorDepth">Color depth.</param>
        </member>
        <member name="M:Cosmos.System.Graphics.Bitmap.#ctor(System.UInt32,System.UInt32,System.Byte[],Cosmos.System.Graphics.ColorDepth)">
            <summary>
            Create a bitmap from a byte array representing the pixels.
            </summary>
            <param name="Width">Width of the bitmap.</param>
            <param name="Height">Height of the bitmap.</param>
            <param name="pixelData">Byte array which includes the values for each pixel.</param>
            <param name="colorDepth">Format of pixel data.</param>
            <exception cref="T:System.NotImplementedException">Thrwon if color depth is not 32.</exception>
            <exception cref="T:System.OverflowException">Thrown if bitmap size is bigger than Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.Bitmap.#ctor(System.String)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Graphics.Bitmap"/> class, with a specified path to a BMP file.
            </summary>
            <param name="path">Path to file.</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if path is invalid.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item>Thrown if path is null.</item>
            <item>Memory error.</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
            <exception cref="T:System.NotSupportedException">
            <list type="bullet">
            <item>Thrown on fatal error (contact support).</item>
            <item>The path refers to non-file.</item>
            </list>
            </exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the stream is closed.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown if header is not from a BMP.</item>
            <item>Info header size has the wrong value.</item>
            <item>Number of planes is not 1. Can not read file.</item>
            <item>Total Image Size is smaller than pure image size.</item>
            </list>
            </exception>
            <exception cref="T:System.NotImplementedException">Thrown if pixelsize is other then 32 / 24 or the file compressed.</exception>
            <exception cref="T:System.Security.SecurityException">Thrown if the caller does not have permissions to read / write the file.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file cannot be found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if the specified path is invalid.</exception>
            <exception cref="T:System.IO.PathTooLongException">Thrown if the specified path is exceed the system-defined max length.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.Bitmap.#ctor(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Graphics.Bitmap"/> class, with a specified image data byte array. 
            WARNING: Unitl IL2CPU problems have been fixed, Memory Streams do not work
            </summary>
            <param name="imageData">byte array.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if imageData is null / memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
            <exception cref="T:System.NotSupportedException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown if header is not from a BMP.</item>
            <item>Info header size has the wrong value.</item>
            <item>Number of planes is not 1.</item>
            <item>Total Image Size is smaller than pure image size.</item>
            </list>
            </exception>
            <exception cref="T:System.NotImplementedException">Thrown if pixelsize is other then 32 / 24 or the file compressed.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.Bitmap.CreateBitmap(System.IO.Stream)">
            <summary>
            Create bitmap from stream.
            </summary>
            <param name="stream">Stream.</param>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
            <exception cref="T:System.NotSupportedException">
            <list type="bullet">
            <item>Thrown on fatal error (contact support).</item>
            <item>The stream does not support seeking.</item>
            </list>
            </exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the stream is closed.</exception>
            <exception cref="T:System.Exception">
            <list type="bullet">
            <item>Thrown if header is not from a BMP.</item>
            <item>Info header size has the wrong value.</item>
            <item>Number of planes is not 1. Can not read file.</item>
            <item>Total Image Size is smaller than pure image size.</item>
            </list>
            </exception>
            <exception cref="T:System.NotImplementedException">Thrown if pixelsize is other then 32 / 24 or the file compressed.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.Bitmap.Save(System.String)">
            <summary>
            Save image as bmp file.
            </summary>
            <param name="path">Path to the file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.OverflowException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
            <exception cref="T:System.NotSupportedException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.Bitmap.Save(System.IO.Stream,Cosmos.System.Graphics.ImageFormat)">
            <summary>
            Save image to stream.
            </summary>
            <param name="stream">Stream.</param>
            <param name="imageFormat">Image format.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on memory error.</exception>
            <exception cref="T:System.RankException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.InvalidCastException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on memory error.</exception>
            <exception cref="T:System.OverflowException">Thrown on memory error.</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the stream is closed.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.Canvas.Clear">
            <summary>
            Clear all the Canvas with the Black color.
            </summary>
        </member>
        <member name="T:Cosmos.System.Graphics.ColorDepth">
            <summary>
            Color depth. Available:
            <list type="bullet">
            <item>ColorDepth4 - EGA 16 colors</item>
            <item>ColorDepth8 - VGA 256 colors</item>
            <item>ColorDepth16 - 65535 colors</item>
            <item>ColorDepth24 - 16,777,216 of colors</item>
            <item>ColorDepth32 - 16,777,216 of colors (with transparency)</item>
            </list>
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.ColorDepth.ColorDepth4">
            <summary>
            EGA 16 colors.
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.ColorDepth.ColorDepth8">
            <summary>
            VGA 256 colors.
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.ColorDepth.ColorDepth16">
            <summary>
            65535 colors.
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.ColorDepth.ColorDepth24">
            <summary>
            16,777,216 of colors.
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.ColorDepth.ColorDepth32">
            <summary>
            16,777,216 of colors (with transparency).
            </summary>
        </member>
        <member name="T:Cosmos.System.Graphics.FullScreenCanvas">
            <summary>
            FullScreenCanvas class. Used to set and get full screen canvas.
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.FullScreenCanvas.IsInUse">
            <summary>
            Boolean value whether CGS is in use or not
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.FullScreenCanvas.Disable">
            <summary>
            Disables the specified Graphics Driver used and returns to VGA text mode 80x25
            </summary>
        </member>
        <member name="T:Cosmos.System.Graphics.FullScreenCanvas.VideoDriver">
            <summary>
            List of all video drivers (BGA, 
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.FullScreenCanvas._SVGAIIDevice">
            <summary>
            SVGA 2 device.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.FullScreenCanvas.BGAExists">
            <summary>
            Checks whether the Bochs Graphics Adapter exists (not limited to Bochs)
            </summary>
            <returns></returns>
        </member>
        <member name="F:Cosmos.System.Graphics.FullScreenCanvas._VideoDriver">
            <summary>
            Video driver.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.FullScreenCanvas.GetVideoDriver">
            <summary>
            Get video driver.
            </summary>
            <returns>Canvas value.</returns>
            <exception cref="!:sys.ArgumentOutOfRangeException">Thrown if default graphics mode is not suppoted.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.FullScreenCanvas.GetVideoDriver(Cosmos.System.Graphics.Mode)">
            <summary>
            Get video driver.
            </summary>
            <param name="mode">Mode.</param>
            <returns>Canvas value.</returns>
            <exception cref="!:sys.ArgumentOutOfRangeException">Thrown if graphics mode is not suppoted.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.FullScreenCanvas.GetFullScreenCanvas">
            <summary>
            Get full screen canvas.
            </summary>
            <returns>Canvas value.</returns>
            <exception cref="!:sys.ArgumentOutOfRangeException">Thrown if default graphics mode is not suppoted.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.FullScreenCanvas.GetFullScreenCanvas(Cosmos.System.Graphics.Mode)">
            <summary>
            Get full screen canvas.
            </summary>
            <param name="mode">Mode.</param>
            <returns>Canvas value.</returns>
            <exception cref="!:sys.ArgumentOutOfRangeException">Thrown if graphics mode is not suppoted.</exception>
        </member>
        <member name="T:Cosmos.System.Graphics.Image">
            <summary>
            Image class.
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.Image.rawData">
            <summary>
            Get and set raw data (pixels array).
            </summary>
        </member>
        <member name="P:Cosmos.System.Graphics.Image.Width">
            <summary>
            Get and set image width.
            </summary>
        </member>
        <member name="P:Cosmos.System.Graphics.Image.Height">
            <summary>
            Get and set image height.
            </summary>
        </member>
        <member name="P:Cosmos.System.Graphics.Image.Depth">
            <summary>
            Get and set image color depth.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.Image.#ctor(System.UInt32,System.UInt32,Cosmos.System.Graphics.ColorDepth)">
            <summary>
            Create new instance of <see cref="T:Cosmos.System.Graphics.Image"/> class.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="color">Color depth.</param>
        </member>
        <member name="T:Cosmos.System.Graphics.ImageFormat">
            <summary>
            Supported image formats.
            </summary>
        </member>
        <member name="T:Cosmos.System.Graphics.Mode">
            <summary>
            Mode struct. Represents a video mode in term of its number of columns, rows and color depth.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.#ctor(System.Int32,System.Int32,Cosmos.System.Graphics.ColorDepth)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.Graphics.Mode"/> struct.
            </summary>
            <param name="columns">Number of columns.</param>
            <param name="rows">Number of rows.</param>
            <param name="color_depth">Color depth.</param>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.Equals(Cosmos.System.Graphics.Mode)">
            <summary>
            Check if modes equal.
            </summary>
            <param name="other">Other mode.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.Equals(System.Object)">
            <summary>
            Check if modes equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.GetHashCode">
            <summary>
            Get hash code.
            </summary>
            <returns>int value.</returns>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.CompareTo(Cosmos.System.Graphics.Mode)">
            <summary>
            Compare modes.
            </summary>
            <param name="other">Other mode to compare to.</param>
            <returns>-1 if this smaller, +1 if this bigger, 0 otherwise.</returns>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.op_Equality(Cosmos.System.Graphics.Mode,Cosmos.System.Graphics.Mode)">
            <summary>
            Check if modes are equal.
            </summary>
            <param name="mode_a">lhs mode.</param>
            <param name="mode_b">rhs mode.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.op_Inequality(Cosmos.System.Graphics.Mode,Cosmos.System.Graphics.Mode)">
            <summary>
            Check if modes are not equal.
            </summary>
            <param name="mode_a">lhs mode.</param>
            <param name="mode_b">rhs mode.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.op_GreaterThan(Cosmos.System.Graphics.Mode,Cosmos.System.Graphics.Mode)">
            <summary>
            Compare modes.
            </summary>
            <param name="mode_a">lhs mode.</param>
            <param name="mode_b">rhs mode.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.op_LessThan(Cosmos.System.Graphics.Mode,Cosmos.System.Graphics.Mode)">
            <summary>
            Compare modes.
            </summary>
            <param name="mode_a">lhs mode.</param>
            <param name="mode_b">rhs mode.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.op_GreaterThanOrEqual(Cosmos.System.Graphics.Mode,Cosmos.System.Graphics.Mode)">
            <summary>
            Compare modes.
            </summary>
            <param name="mode_a">lhs mode.</param>
            <param name="mode_b">rhs mode.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.op_LessThanOrEqual(Cosmos.System.Graphics.Mode,Cosmos.System.Graphics.Mode)">
            <summary>
            Compare modes.
            </summary>
            <param name="mode_a">lhs mode.</param>
            <param name="mode_b">rhs mode.</param>
            <returns>bool value.</returns>
        </member>
        <member name="P:Cosmos.System.Graphics.Mode.Columns">
            <summary>
            Get columns.
            </summary>
        </member>
        <member name="P:Cosmos.System.Graphics.Mode.Rows">
            <summary>
            Get rows.
            </summary>
        </member>
        <member name="P:Cosmos.System.Graphics.Mode.ColorDepth">
            <summary>
            Get color depth
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.Mode.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="M:Cosmos.System.Graphics.PCScreenFont.CreateVGAFont">
            <summary>
            Convert the font so that it can be loaded into VGA
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.System.Graphics.Pen">
            <summary>
            Pen class. Represents pen, which used to draw in color and width.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.Pen.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.Graphics.Pen"/> class.
            </summary>
            <param name="color">Color.</param>
            <param name="width">Width.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if width is smaller than 0.</exception>
        </member>
        <member name="P:Cosmos.System.Graphics.Pen.Color">
            <summary>
            Get and set pen color.
            </summary>
        </member>
        <member name="P:Cosmos.System.Graphics.Pen.Width">
            <summary>
            Get and set pen width.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.Pen.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="T:Cosmos.System.Graphics.Point">
            <summary>
            Point class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Create new instance of <see cref="T:Cosmos.System.Graphics.Point"/> class.
            </summary>
            <param name="x">x coordinate.</param>
            <param name="y">y coordinate.</param>
        </member>
        <member name="P:Cosmos.System.Graphics.Point.X">
            <summary>
            Get and set x coordinate.
            </summary>
        </member>
        <member name="P:Cosmos.System.Graphics.Point.Y">
            <summary>
            Get and set y coordinate.
            </summary>
        </member>
        <member name="T:Cosmos.System.Graphics.SVGAIICanvas">
            <summary>
            SVGAIIScreen class. Used to draw ractengales to the screen. See also: <seealso cref="T:Cosmos.System.Graphics.Canvas"/>.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.Disable">
            <summary>
            Disables the SVGA driver, parent method returns to VGA text mode
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.SVGAIICanvas.mSVGAIIDebugger">
            <summary>
            Debugger.
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.SVGAIICanvas._Mode">
            <summary>
            Graphics mode.
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.SVGAIICanvas._xSVGADriver">
            <summary>
            VMWare SVGA 2 driver.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.#ctor">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.Graphics.SVGAIICanvas"/> class.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if default graphics mode is not suppoted.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.#ctor(Cosmos.System.Graphics.Mode)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.Graphics.SVGAIICanvas"/> class.
            </summary>
            <param name="aMode">A graphics mode.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if mode is not suppoted.</exception>
        </member>
        <member name="P:Cosmos.System.Graphics.SVGAIICanvas.Mode">
            <summary>
            Get and set graphics mode.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">(set) Thrown if mode is not suppoted.</exception>
        </member>
        <member name="P:Cosmos.System.Graphics.SVGAIICanvas.DefaultGraphicMode">
            <summary>
            Override canvas dufault graphics mode.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.DrawPoint(Cosmos.System.Graphics.Pen,System.Int32,System.Int32)">
            <summary>
            Draw point.
            </summary>
            <param name="pen">Pen to draw with.</param>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <exception cref="T:System.Exception">Thrown on memory access violation.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.DrawArray(System.Drawing.Color[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw array of colors.
            Not implemented.
            </summary>
            <param name="colors">Array of colors.</param>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <exception cref="T:System.NotImplementedException">Thrown always.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.DrawPoint(Cosmos.System.Graphics.Pen,System.Single,System.Single)">
            <summary>
            Draw point.
            Not implemented.
            </summary>
            <param name="pen">Pen to draw with.</param>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <exception cref="T:System.NotImplementedException">Thrown always (only int coordinates supported).</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.DrawFilledRectangle(Cosmos.System.Graphics.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw filled rectangle.
            </summary>
            <param name="aPen">Pen to draw with.</param>
            <param name="aX_start">starting X coordinate.</param>
            <param name="aY_start">starting Y coordinate.</param>
            <param name="aWidth">Width.</param>
            <param name="aHeight">Height.</param>
            <exception cref="T:System.Exception">Thrown on memory access violation.</exception>
            <exception cref="T:System.NotImplementedException">Thrown if VMWare SVGA 2 has no rectange copy capability</exception>
        </member>
        <member name="P:Cosmos.System.Graphics.SVGAIICanvas.AvailableModes">
            <summary>
            Available SVGA 2 supported video modes.
            <para>
            SD:
            <list type="bullet">
            <item>320x200x32.</item>
            <item>320x240x32.</item>
            <item>640x480x32.</item>
            <item>720x480x32.</item>
            <item>800x600x32.</item>
            <item>1024x768x32.</item>
            <item>1152x768x32.</item>
            </list>
            </para>
            <para>
            HD:
            <list type="bullet">
            <item>1280x720x32.</item>
            <item>1280x768x32.</item>
            <item>1280x800x32.</item>
            <item>1280x1024x32.</item>
            </list>
            </para>
            <para>
            HDR:
            <list type="bullet">
            <item>1360x768x32.</item>
            <item>1366x768x32.</item>
            <item>1440x900x32.</item>
            <item>1400x1050x32.</item>
            <item>1600x1200x32.</item>
            <item>1680x1050x32.</item>
            </list>
            </para>
            <para>
            HDTV:
            <list type="bullet">
            <item>1920x1080x32.</item>
            <item>1920x1200x32.</item>
            </list>
            </para>
            <para>
            2K:
            <list type="bullet">
            <item>2048x1536x32.</item>
            <item>2560x1080x32.</item>
            <item>2560x1600x32.</item>
            <item>2560x2048x32.</item>
            <item>3200x2048x32.</item>
            <item>3200x2400x32.</item>
            <item>3840x2400x32.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.SetGraphicsMode(Cosmos.System.Graphics.Mode)">
            <summary>
            Set graphics mode.
            </summary>
            <param name="aMode">A mode.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if mode is not suppoted.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.Clear(System.Drawing.Color)">
            <summary>
            Clear screen to specified color.
            </summary>
            <param name="aColor">Color.</param>
            <exception cref="T:System.Exception">Thrown on memory access violation.</exception>
            <exception cref="T:System.NotImplementedException">Thrown if VMWare SVGA 2 has no rectange copy capability</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get pixel color.
            </summary>
            <param name="aX">A X coordinate.</param>
            <param name="aY">A Y coordinate.</param>
            <returns>Color value.</returns>
            <exception cref="T:System.Exception">Thrown on memory access violation.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.SetCursor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Set cursor.
            </summary>
            <param name="aVisible">Visible.</param>
            <param name="aX">A X coordinate.</param>
            <param name="aY">A Y coordinate.</param>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.CreateCursor">
            <summary>
            Create cursor.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.CopyPixel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixel
            </summary>
            <param name="aX">A source X coordinate.</param>
            <param name="aY">A source Y coordinate.</param>
            <param name="aNewX">A destination X coordinate.</param>
            <param name="aNewY">A destination Y coordinate.</param>
            <param name="aWidth">A width.</param>
            <param name="aHeight">A height.</param>
            <exception cref="T:System.NotImplementedException">Thrown if VMWare SVGA 2 has no rectangle copy capability</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.MovePixel(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move pixel
            </summary>
            <param name="aX">A X coordinate.</param>
            <param name="aY">A Y coordinate.</param>
            <param name="aNewX">A new X coordinate.</param>
            <param name="aNewY">A new Y coordinate.</param>
            <exception cref="T:System.NotImplementedException">Thrown if VMWare SVGA 2 has no rectange copy capability</exception>
            <exception cref="T:System.Exception">Thrown on memory access violation.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.SVGAIICanvas.GetPointColor(System.Int32,System.Int32)">
            <summary>
            Get point color.
            </summary>
            <param name="aX">X coordinate.</param>
            <param name="aY">Y coordinate.</param>
            <returns>Color value.</returns>
            <exception cref="T:System.Exception">Thrown on memory access violation.</exception>
        </member>
        <member name="T:Cosmos.System.Graphics.VBECanvas">
            <summary>
            VBECanvas class. Used to control screen, by VBE (VESA BIOS Extensions) standard. See also: <seealso cref="T:Cosmos.System.Graphics.Canvas"/>.
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.VBECanvas._DefaultMode">
            <summary>
            Default video mode. 1024x768x32.
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.VBECanvas._VBEDriver">
            <summary>
            Driver for Setting vbe modes and ploting/getting pixels
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.VBECanvas._Mode">
            <summary>
            Video mode.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.#ctor">
            <summary>
            Create new instance of the <see cref="!:VBEScreen"/> class.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if default mode (1024x768x32) is not suppoted.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.#ctor(Cosmos.System.Graphics.Mode)">
            <summary>
            Create new instance of the <see cref="!:VBEScreen"/> class.
            </summary>
            <param name="mode">VBE mode.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if mode is not suppoted.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.Disable">
            <summary>
            Disables VBE Graphics mode, parent method returns to VGA text mode (80x25)
            </summary>
        </member>
        <member name="P:Cosmos.System.Graphics.VBECanvas.Mode">
            <summary>
            Get and set video mode.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">(set) Thrown if mode is not suppoted.</exception>
        </member>
        <member name="P:Cosmos.System.Graphics.VBECanvas.AvailableModes">
            <summary>
            Available VBE supported video modes.
            <para>
            Low res:
            <list type="bullet">
            <item>320x240x32.</item>
            <item>640x480x32.</item>
            <item>800x600x32.</item>
            <item>1024x768x32.</item>
            </list>
            </para>
            <para>
            HD:
            <list type="bullet">
            <item>1280x720x32.</item>
            <item>1280x1024x32.</item>
            </list>
            </para>
            <para>
            HDR:
            <list type="bullet">
            <item>1366x768x32.</item>
            <item>1680x1050x32.</item>
            </list>
            </para>
            <para>
            HDTV:
            <list type="bullet">
            <item>1920x1080x32.</item>
            <item>1920x1200x32.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Cosmos.System.Graphics.VBECanvas.DefaultGraphicMode">
            <summary>
            Override Canvas default graphics mode.
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.SetMode(Cosmos.System.Graphics.Mode)">
            <summary>
            Use this to setup the screen, this will disable the console.
            </summary>
            <param name="Mode">The desired Mode resolution</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if mode is not suppoted.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.Clear(System.Drawing.Color)">
            <summary>
            Clear screen to specified color.
            </summary>
            <param name="color">Color.</param>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.DrawPoint(Cosmos.System.Graphics.Pen,System.Int32,System.Int32)">
            <summary>
            Draw point to the screen.
            </summary>
            <param name="aPen">Pen to draw the point with.</param>
            <param name="aX">X coordinate.</param>
            <param name="aY">Y coordinate.</param>
            <exception cref="T:System.NotImplementedException">Thrown if color depth is not supported (currently only 32 is supported).</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.DrawPoint(Cosmos.System.Graphics.Pen,System.Single,System.Single)">
            <summary>
            Draw point to the screen. 
            Not implemented.
            </summary>
            <param name="aPen">Pen to draw the point with.</param>
            <param name="aX">X coordinate.</param>
            <param name="aY">Y coordinate.</param>
            <exception cref="T:System.NotImplementedException">Thrown always (only int coordinats supported).</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.DrawArray(System.Drawing.Color[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw array of colors.
            </summary>
            <param name="aColors">Colors array.</param>
            <param name="aX">X coordinate.</param>
            <param name="aY">Y coordinate.</param>
            <param name="aWidth">Width.</param>
            <param name="aHeight">unused.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if coordinates are invalid, or width is less than 0.</exception>
            <exception cref="T:System.NotImplementedException">Thrown if color depth is not supported.</exception>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.GetPointOffset(System.Int32,System.Int32)">
            <summary>
            Get point offset.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>int value.</returns>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.DrawFilledRectangle(Cosmos.System.Graphics.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw filled rectangle.
            </summary>
            <param name="aPen">Pen to draw with.</param>
            <param name="aX">X coordinate.</param>
            <param name="aY">Y coordinate.</param>
            <param name="aWidth">Width.</param>
            <param name="aHeight">Height.</param>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.DrawImage(Cosmos.System.Graphics.Image,System.Int32,System.Int32)">
            <summary>
            Draw image.
            </summary>
            <param name="aImage">Image.</param>
            <param name="aX">X coordinate.</param>
            <param name="aY">Y coordinate.</param>
        </member>
        <member name="M:Cosmos.System.Graphics.VBECanvas.GetPointColor(System.Int32,System.Int32)">
            <summary>
            Get point color.
            </summary>
            <param name="aX">X coordinate.</param>
            <param name="aY">Y coordinate.</param>
            <returns>Color value.</returns>
        </member>
        <member name="T:Cosmos.System.Graphics.VGACanvas">
            <summary>
            VGACanvas class. Used to control screen.
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.VGACanvas._Enabled">
            <summary>
            Private boolean whether VGA graphics mode is enabled or not
            </summary>
        </member>
        <member name="F:Cosmos.System.Graphics.VGACanvas._VGADriver">
            <summary>
            The HAL VGA driver
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.#ctor(Cosmos.System.Graphics.Mode)">
            <summary>
            VGA graphics mode Canvas constructor - see Canvas.cs
            </summary>
            <param name="aMode"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.#ctor">
            <summary>
            Creates a VGA graphics mode with the default mode
            </summary>
        </member>
        <member name="P:Cosmos.System.Graphics.VGACanvas.Mode">
            <summary>
            Gets or sets the VGA graphics mode
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.Clear(System.Drawing.Color)">
            <summary>
            Clears the screen of all pixels
            </summary>
            <param name="aColor"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.Disable">
            <summary>
            Disables VGA graphics mode, parent method returns to 80x25 text mode
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawArray(System.Drawing.Color[],Cosmos.System.Graphics.Point,System.Int32,System.Int32)">
            <summary>
            Draws an array of colors
            </summary>
            <param name="aColors"></param>
            <param name="aPoint"></param>
            <param name="aWidth"></param>
            <param name="aHeight"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawArray(System.Drawing.Color[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an array of colors, specifiying X and Y coords
            </summary>
            <param name="aColors"></param>
            <param name="aX"></param>
            <param name="aY"></param>
            <param name="aWidth"></param>
            <param name="aHeight"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawCircle(Cosmos.System.Graphics.Pen,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="aPen"></param>
            <param name="aXCenter"></param>
            <param name="aYCenter"></param>
            <param name="aRadius"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawCircle(Cosmos.System.Graphics.Pen,Cosmos.System.Graphics.Point,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="aPen"></param>
            <param name="aPoint"></param>
            <param name="aRadius"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawEllipse(Cosmos.System.Graphics.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse
            </summary>
            <param name="aPen"></param>
            <param name="aXCenter"></param>
            <param name="aYCenter"></param>
            <param name="aXRadius"></param>
            <param name="aYRadius"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawEllipse(Cosmos.System.Graphics.Pen,Cosmos.System.Graphics.Point,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse
            </summary>
            <param name="aPen"></param>
            <param name="aPoint"></param>
            <param name="aXRadius"></param>
            <param name="aYRadius"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawFilledCircle(Cosmos.System.Graphics.Pen,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled circle
            </summary>
            <param name="aPen"></param>
            <param name="aX0"></param>
            <param name="aY0"></param>
            <param name="aRadius"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawFilledCircle(Cosmos.System.Graphics.Pen,Cosmos.System.Graphics.Point,System.Int32)">
            <summary>
            Draws a filled circle
            </summary>
            <param name="aPen"></param>
            <param name="aPoint"></param>
            <param name="aRadius"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawFilledEllipse(Cosmos.System.Graphics.Pen,Cosmos.System.Graphics.Point,System.Int32,System.Int32)">
            <summary>
            Draws a filled ellipse
            </summary>
            <param name="aPen"></param>
            <param name="aPoint"></param>
            <param name="aHeight"></param>
            <param name="aWidth"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawFilledEllipse(Cosmos.System.Graphics.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled ellipse
            </summary>
            <param name="aPen"></param>
            <param name="aX"></param>
            <param name="aY"></param>
            <param name="aHeight"></param>
            <param name="aWidth"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawFilledRectangle(Cosmos.System.Graphics.Pen,Cosmos.System.Graphics.Point,System.Int32,System.Int32)">
            <summary>
            Draws a filled rectangle
            </summary>
            <param name="aPen"></param>
            <param name="aPoint"></param>
            <param name="aWidth"></param>
            <param name="aHeight"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawFilledRectangle(Cosmos.System.Graphics.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled rectangle
            </summary>
            <param name="aPen"></param>
            <param name="aXStart"></param>
            <param name="aYStart"></param>
            <param name="aWidth"></param>
            <param name="aHeight"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawLine(Cosmos.System.Graphics.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line (in the sand?)
            </summary>
            <param name="aPen"></param>
            <param name="aX1"></param>
            <param name="aY1"></param>
            <param name="aX2"></param>
            <param name="aY2"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawPoint(Cosmos.System.Graphics.Pen,System.Int32,System.Int32)">
            <summary>
            Draws a point
            </summary>
            <param name="aPen"></param>
            <param name="aX"></param>
            <param name="aY"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawPoint(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Draws a point
            </summary>
            <param name="aColor"></param>
            <param name="aX"></param>
            <param name="aY"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawPoint(Cosmos.System.Graphics.Pen,System.Single,System.Single)">
            <summary>
            Draws a point
            </summary>
            <param name="aPen"></param>
            <param name="aX"></param>
            <param name="aY"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawPolygon(Cosmos.System.Graphics.Pen,Cosmos.System.Graphics.Point[])">
            <summary>
            Draws a polygon
            </summary>
            <param name="aPen"></param>
            <param name="aPoints"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawRectangle(Cosmos.System.Graphics.Pen,Cosmos.System.Graphics.Point,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle
            </summary>
            <param name="aPen"></param>
            <param name="aPoint"></param>
            <param name="aWidth"></param>
            <param name="aHeight"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawRectangle(Cosmos.System.Graphics.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle
            </summary>
            <param name="aPen"></param>
            <param name="aX"></param>
            <param name="aY"></param>
            <param name="aWidth"></param>
            <param name="aHeight"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawSquare(Cosmos.System.Graphics.Pen,Cosmos.System.Graphics.Point,System.Int32)">
            <summary>
            Draws a square
            </summary>
            <param name="aPen"></param>
            <param name="aPoint"></param>
            <param name="aSize"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawSquare(Cosmos.System.Graphics.Pen,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a square
            </summary>
            <param name="aPen"></param>
            <param name="aX"></param>
            <param name="aY"></param>
            <param name="aSize"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawTriangle(Cosmos.System.Graphics.Pen,Cosmos.System.Graphics.Point,Cosmos.System.Graphics.Point,Cosmos.System.Graphics.Point)">
            <summary>
            Draws a triangle
            </summary>
            <param name="aPen"></param>
            <param name="aPoint0"></param>
            <param name="aPoint1"></param>
            <param name="aPoint2"></param>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.DrawTriangle(Cosmos.System.Graphics.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a triangle
            </summary>
            <param name="aPen"></param>
            <param name="aV1x"></param>
            <param name="aV1y"></param>
            <param name="aV2x"></param>
            <param name="aV2y"></param>
            <param name="aV3x"></param>
            <param name="aV3y"></param>
        </member>
        <member name="F:Cosmos.System.Graphics.VGACanvas._AvailableModes">
            <summary>
            List of available resolutions
            </summary>
        </member>
        <member name="M:Cosmos.System.Graphics.VGACanvas.GetPointColor(System.Int32,System.Int32)">
            <summary>
            Retrieves the RGB value of a specified pixel
            </summary>
            <param name="aX"></param>
            <param name="aY"></param>
            <returns></returns>
        </member>
        <member name="P:Cosmos.System.Graphics.VGACanvas.DefaultGraphicMode">
            <summary>
            The default graphics mode
            </summary>
        </member>
        <member name="P:Cosmos.System.Graphics.VGACanvas.Enabled">
            <summary>
            Boolean value whether VGA is in graphics mode or not
            </summary>
        </member>
        <member name="T:Cosmos.System.Kernel">
            <summary>
            Provides a base kernel class for a Cosmos-based system
            </summary>
        </member>
        <member name="F:Cosmos.System.Kernel.mDebugger">
            <summary>
            User ring debugger instance, with the tag "Kernel".
            </summary>
        </member>
        <member name="F:Cosmos.System.Kernel.ClearScreen">
            <summary>
            Clear screen.
            </summary>
        </member>
        <member name="F:Cosmos.System.Kernel.mStarted">
            <summary>
            Kernel started.
            </summary>
        </member>
        <member name="F:Cosmos.System.Kernel.mStopped">
            <summary>
            Kernel stopped.
            </summary>
        </member>
        <member name="M:Cosmos.System.Kernel.GetTextScreen">
            <summary>
            Get text screen device.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Cosmos.System.Kernel.GetKeyboardScanMap">
            <summary>
            Get keyboard key layout.
            </summary>
            <returns>Keyboard key layout.</returns>
        </member>
        <member name="M:Cosmos.System.Kernel.SetKeyboardScanMap(Cosmos.System.ScanMapBase)">
            <summary>
            Set keyboard key layout.
            </summary>
            <param name="ScanMap">Keyboard key layout.</param>
        </member>
        <member name="M:Cosmos.System.Kernel.Start">
            <summary>
            Start the system up using the properties for configuration.
            </summary>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
        </member>
        <member name="M:Cosmos.System.Kernel.BeforeRun">
            <summary>
            Pre-run events
            </summary>
        </member>
        <member name="M:Cosmos.System.Kernel.Run">
            <summary>
            Main kernel loop
            </summary>
        </member>
        <member name="M:Cosmos.System.Kernel.AfterRun">
            <summary>
            After the Run() method is exited (?)
            </summary>
        </member>
        <member name="M:Cosmos.System.Kernel.Stop">
            <summary>
            Shut down the system and power off
            </summary>
        </member>
        <member name="M:Cosmos.System.Kernel.#ctor">
            <summary>
            Kernal object constructor.
            </summary>
        </member>
        <member name="M:Cosmos.System.Kernel.Restart">
            <summary>
            Shutdown and restart.
            Not implemented.
            </summary>
        </member>
        <member name="M:Cosmos.System.Kernel.PrintDebug(System.String)">
            <summary>
            Print message to the debbuger at system ring with "Global"-tag.
            </summary>
            <param name="message">A message to print.</param>
        </member>
        <member name="P:Cosmos.System.Kernel.InterruptsEnabled">
            <summary>
            Get interrupts status.
            </summary>
        </member>
        <member name="T:Cosmos.System.ConsoleKeyEx">
            <summary>
            ConsoleKeyEx enum.
            </summary>
        </member>
        <member name="T:Cosmos.System.ConsoleKeyExExtensions">
            <summary>
            ConsoleKeyEx extensions class.
            </summary>
        </member>
        <member name="M:Cosmos.System.ConsoleKeyExExtensions.ToConsoleKey(Cosmos.System.ConsoleKeyEx)">
            <summary>
            Convert ConsoleKeyEx to ConsoleKey.
            </summary>
            <param name="keyEx">KeyEx to convert.</param>
            <returns>ConsoleKey value.</returns>
            <exception cref="T:System.Exception">Thorwn if KeyEx not implemented.</exception>
        </member>
        <member name="T:Cosmos.System.KeyboardManager">
            <summary>
            Keyboard manager class. Used to manage keyboard.
            </summary>
        </member>
        <member name="P:Cosmos.System.KeyboardManager.NumLock">
            <summary>
            Get and set NumLock.
            </summary>
        </member>
        <member name="P:Cosmos.System.KeyboardManager.CapsLock">
            <summary>
            Get and set CapsLock.
            </summary>
        </member>
        <member name="P:Cosmos.System.KeyboardManager.ScrollLock">
            <summary>
            Get and set ScrollLock.
            </summary>
        </member>
        <member name="P:Cosmos.System.KeyboardManager.ControlPressed">
            <summary>
            Get and set Ctrl pressed.
            </summary>
        </member>
        <member name="P:Cosmos.System.KeyboardManager.ShiftPressed">
            <summary>
            Get and set Shift pressed.
            </summary>
        </member>
        <member name="P:Cosmos.System.KeyboardManager.AltPressed">
            <summary>
            Get and set Alt pressed.
            </summary>
        </member>
        <member name="P:Cosmos.System.KeyboardManager.KeyAvailable">
            <summary>
            Get if queued keys exists.
            </summary>
        </member>
        <member name="M:Cosmos.System.KeyboardManager.#cctor">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyboardManager"/> class.
            </summary>
            <exception cref="!:IOException">An I/O error occurred.</exception>
        </member>
        <member name="M:Cosmos.System.KeyboardManager.Enqueue(Cosmos.System.KeyEvent)">
            <summary>
            Enqueue keyEvent.
            </summary>
            <param name="keyEvent">KeyEvent to enqueue.</param>
        </member>
        <member name="M:Cosmos.System.KeyboardManager.HandleFakeScanCode(System.Byte,System.Boolean)">
            <summary>
            Allow faking scancodes. Used for test kernels
            </summary>
            <param name="aScancode">A scan code.</param>
            <param name="aReleased">Key released.</param>
            <exception cref="!:IOException">An I/O error occurred.</exception>
        </member>
        <member name="M:Cosmos.System.KeyboardManager.HandleScanCode(System.Byte,System.Boolean)">
            <summary>
            Handle scan code. Used to update LEDs, 
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="aReleased">Key released.</param>
            <exception cref="!:IOException">An I/O error occurred.</exception>
        </member>
        <member name="M:Cosmos.System.KeyboardManager.UpdateLeds">
            <summary>
            Update keyboard LEDs.
            </summary>
        </member>
        <member name="M:Cosmos.System.KeyboardManager.GetKey(System.Byte,Cosmos.System.KeyEvent@)">
            <summary>
            Get key pressed.
            </summary>
            <param name="aScancode">A scan code.</param>
            <param name="keyInfo">KeyEvent output.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.KeyboardManager.TryReadKey(Cosmos.System.KeyEvent@)">
            <summary>
            Try read key.
            </summary>
            <param name="oKey">Output KeyEvent.</param>
            <returns>bool value.</returns>
            <exception cref="!:InvalidOperationException">Thrown when queue is empty.</exception>
        </member>
        <member name="M:Cosmos.System.KeyboardManager.ReadKey">
            <summary>
            Read key.
            </summary>
            <returns>KeyEvent value.</returns>
            <exception cref="!:InvalidOperationException">Thrown when queue is empty.</exception>
        </member>
        <member name="M:Cosmos.System.KeyboardManager.GetKeyLayout">
            <summary>
            Get key layout.
            </summary>
            <returns>ScanMapBase value.</returns>
        </member>
        <member name="M:Cosmos.System.KeyboardManager.SetKeyLayout(Cosmos.System.ScanMapBase)">
            <summary>
            Set key layout.
            </summary>
            <param name="aScanMap">A scan map</param>
        </member>
        <member name="M:Cosmos.System.KeyboardManager.AddKeyboard(Cosmos.HAL.KeyboardBase)">
            <summary>
            Add keyboard
            </summary>
            <param name="aKeyboard">A keyboard to add.</param>
            <exception cref="!:IOException">An I/O error occurred.</exception>
        </member>
        <member name="T:Cosmos.System.KeyEvent">
            <summary>
            KeyEvent class. Represent key event.
            </summary>
        </member>
        <member name="T:Cosmos.System.KeyEvent.KeyEventType">
            <summary>
            Key event type.
            </summary>
        </member>
        <member name="P:Cosmos.System.KeyEvent.KeyChar">
            <summary>
            Get and set key char.
            </summary>
        </member>
        <member name="P:Cosmos.System.KeyEvent.Key">
            <summary>
            Get and set key.
            </summary>
        </member>
        <member name="P:Cosmos.System.KeyEvent.Modifiers">
            <summary>
            Get and set console modifiers.
            </summary>
        </member>
        <member name="P:Cosmos.System.KeyEvent.Type">
            <summary>
            Get and set key event type.
            </summary>
        </member>
        <member name="M:Cosmos.System.KeyEvent.#ctor">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyEvent"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.KeyEvent.#ctor(System.Char,Cosmos.System.ConsoleKeyEx,System.Boolean,System.Boolean,System.Boolean,Cosmos.System.KeyEvent.KeyEventType)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyEvent"/> class.
            </summary>
            <param name="keyChar">Key char.</param>
            <param name="key">Key.</param>
            <param name="shift">Shift.</param>
            <param name="alt">Alt.</param>
            <param name="control">Ctrl.</param>
            <param name="type">Type.</param>
        </member>
        <member name="T:Cosmos.System.KeyMapping">
            <summary>
            KeyMapping class. Used to map keyboard.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.Scancode">
            <summary>
            Scan code.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.Shift">
            <summary>
            Shift.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.Num">
            <summary>
            Num.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.Caps">
            <summary>
            Caps.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.ShiftCaps">
            <summary>
            Shift and Caps.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.ShiftNum">
            <summary>
            Shift and Num.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.Control">
            <summary>
            Ctrl.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.ControlAlt">
            <summary>
            Ctrl and Alt.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.ControlShift">
            <summary>
            Ctrl and Shift.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.ControlAltShift">
            <summary>
            Ctrl, Alt and Shift.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="F:Cosmos.System.KeyMapping.NumLockKey">
            <summary>
            NumLock key.
            </summary>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,Cosmos.System.ConsoleKeyEx,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="norm">Norm.</param>
            <param name="shift">Shift.</param>
            <param name="num">Num.</param>
            <param name="caps">Caps.</param>
            <param name="shiftcaps">Shift and Caps.</param>
            <param name="shiftnum">Shift and Num</param>
            <param name="altgr">Ctrl and Alt.</param>
            <param name="shiftaltgr">Ctrl, Alt and Shift.</param>
            <param name="ctrl">Ctrl.</param>
            <param name="shiftctrl">Shift and Ctrl.</param>
            <param name="aKey">A key.</param>
            <param name="numKey">NumLock key.</param>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,Cosmos.System.ConsoleKeyEx,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="norm">Norm.</param>
            <param name="shift">Shift.</param>
            <param name="num">Num.</param>
            <param name="caps">Caps.</param>
            <param name="shiftcaps">Shift and Caps.</param>
            <param name="shiftnum">Shift and Num</param>
            <param name="altgr">Ctrl and Alt.</param>
            <param name="shiftaltgr">Ctrl, Alt and Shift.</param>
            <param name="aKey">A key.</param>
            <param name="numKey">NumLock key.</param>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,Cosmos.System.ConsoleKeyEx,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="norm">Norm.</param>
            <param name="shift">Shift.</param>
            <param name="num">Num.</param>
            <param name="caps">Caps.</param>
            <param name="shiftcaps">Shift and Caps.</param>
            <param name="shiftnum">Shift and Num</param>
            <param name="altgr">Ctrl and Alt.</param>
            <param name="aKey">A key.</param>
            <param name="numKey">NumLock key.</param>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="norm">Norm.</param>
            <param name="shift">Shift.</param>
            <param name="num">Num.</param>
            <param name="caps">Caps.</param>
            <param name="shiftcaps">Shift and Caps.</param>
            <param name="shiftnum">Shift and Num</param>
            <param name="altgr">Ctrl and Alt.</param>
            <param name="shiftaltgr">Ctrl, Alt and Shift.</param>
            <param name="ctrl">Ctrl.</param>
            <param name="shiftctrl">Shift and Ctrl.</param>
            <param name="aKey">A key.</param>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="norm">Norm.</param>
            <param name="shift">Shift.</param>
            <param name="num">Num.</param>
            <param name="caps">Caps.</param>
            <param name="shiftcaps">Shift and Caps.</param>
            <param name="shiftnum">Shift and Num</param>
            <param name="altgr">Ctrl and Alt.</param>
            <param name="shiftaltgr">Ctrl, Alt and Shift.</param>
            <param name="aKey">A key.</param>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="norm">Norm.</param>
            <param name="shift">Shift.</param>
            <param name="num">Num.</param>
            <param name="caps">Caps.</param>
            <param name="shiftcaps">Shift and Caps.</param>
            <param name="shiftnum">Shift and Num</param>
            <param name="altgr">Ctrl and Alt.</param>
            <param name="aKey">A key.</param>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="norm">Norm.</param>
            <param name="shift">Shift.</param>
            <param name="num">Num.</param>
            <param name="caps">Caps.</param>
            <param name="shiftcaps">Shift and Caps.</param>
            <param name="shiftnum">Shift and Num</param>
            <param name="aKey">A key.</param>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,Cosmos.System.ConsoleKeyEx,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="norm">Norm.</param>
            <param name="shift">Shift.</param>
            <param name="num">Num.</param>
            <param name="caps">Caps.</param>
            <param name="shiftcaps">Shift and Caps.</param>
            <param name="shiftnum">Shift and Num</param>
            <param name="aKey">A key.</param>
            <param name="numKey">NumLock key.</param>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="norm">Norm.</param>
            <param name="shift">Shift.</param>
            <param name="num">Num.</param>
            <param name="caps">Caps.</param>
            <param name="shiftcaps">Shift and Caps.</param>
            <param name="shiftnum">Shift and Num</param>
            <param name="aKey">A key.</param>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,System.Char,Cosmos.System.ConsoleKeyEx,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="num">Num.</param>
            <param name="aKey">A key.</param>
            <param name="numKey">NumLock key.</param>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,System.Char,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="n">All control keys char.</param>
            <param name="aKey">A key.</param>
        </member>
        <member name="M:Cosmos.System.KeyMapping.#ctor(System.Byte,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.KeyMapping"/> class.
            </summary>
            <param name="aScanCode">A scan code.</param>
            <param name="aKey">A key.</param>
        </member>
        <member name="T:Cosmos.System.ScanMapBase">
            <summary>
            ScanMapBase abstract class.
            </summary>
        </member>
        <member name="F:Cosmos.System.ScanMapBase._keys">
            <summary>
            Keys list.
            </summary>
        </member>
        <member name="M:Cosmos.System.ScanMapBase.InitKeys">
            <summary>
            Init keys list.
            </summary>
        </member>
        <member name="M:Cosmos.System.ScanMapBase.#ctor">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.ScanMapBase"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.ScanMapBase.ConvertScanCode(System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Convert scan code to KeyEvent.
            </summary>
            <param name="scan2">Scaned key.</param>
            <param name="ctrl">Ctrl pressed.</param>
            <param name="shift">Shift pressed.</param>
            <param name="alt">Alt pressed.</param>
            <param name="num">Num pressed.</param>
            <param name="caps">Caps pressed.</param>
            <param name="scroll">Scroll pressed.</param>
            <returns>KeyEvent value.</returns>
        </member>
        <member name="M:Cosmos.System.ScanMapBase.ScanCodeMatchesKey(System.Byte,Cosmos.System.ConsoleKeyEx)">
            <summary>
            Check if scan code matches key.
            </summary>
            <param name="ScanCode">Scan code.</param>
            <param name="Key">Key.</param>
            <returns>bool value.</returns>
        </member>
        <member name="T:Cosmos.System.ScanMaps.DE_Standard">
            <summary>
            DE_Standard class. Represent DE_Standard keyboard layout.
            </summary>
        </member>
        <member name="M:Cosmos.System.ScanMaps.DE_Standard.#ctor">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.ScanMaps.DE_Standard"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.ScanMaps.DE_Standard.InitKeys">
            <summary>
            Init key list.
            </summary>
        </member>
        <member name="T:Cosmos.System.ScanMaps.FR_Standard">
            <summary>
            FR_Standard class. Represent FR_Standard keyboard layout.
            </summary>
        </member>
        <member name="M:Cosmos.System.ScanMaps.FR_Standard.InitKeys">
            <summary>
            Init key list.
            </summary>
        </member>
        <member name="T:Cosmos.System.ScanMaps.TR_StandardQ">
            <summary>
            TR_StandardQ class. Represent TR_StandardQ keyboard layout.
            </summary>
        </member>
        <member name="M:Cosmos.System.ScanMaps.TR_StandardQ.#ctor">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.ScanMaps.TR_StandardQ"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.ScanMaps.TR_StandardQ.InitKeys">
            <summary>
            Init key list.
            </summary>
        </member>
        <member name="T:Cosmos.System.ScanMaps.US_Standard">
            <summary>
            US_Standard class. Represent US_Standard keyboard layout.
            </summary>
        </member>
        <member name="M:Cosmos.System.ScanMaps.US_Standard.#ctor">
            <summary>
            Create new instance of the <see cref="T:Cosmos.System.ScanMaps.US_Standard"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.ScanMaps.US_Standard.InitKeys">
            <summary>
            Init key list.
            </summary>
        </member>
        <member name="T:Cosmos.System.MathEx">
            <summary>
            MathEx class. Provides additional math methods.
            </summary>
        </member>
        <member name="M:Cosmos.System.MathEx.Rem(System.Int64,System.Int64)">
            <summary>
            Get the remainder on division of a in b.
            </summary>
            <param name="a">Divided number.</param>
            <param name="b">Divider.</param>
            <returns>long value.</returns>
        </member>
        <member name="T:Cosmos.System.MouseState">
            <summary>
            The possible states of a mouse.
            </summary>
        </member>
        <member name="F:Cosmos.System.MouseState.None">
            <summary>
            No button is pressed.
            </summary>
        </member>
        <member name="F:Cosmos.System.MouseState.Left">
            <summary>
            The left mouse button is pressed.
            </summary>
        </member>
        <member name="F:Cosmos.System.MouseState.Right">
            <summary>
            The right mouse button is pressed.
            </summary>
        </member>
        <member name="F:Cosmos.System.MouseState.Middle">
            <summary>
            The middle mouse button is pressed.
            </summary>
        </member>
        <member name="F:Cosmos.System.MouseState.FourthButton">
            <summary>
            The fourth mouse button is pressed.
            </summary>
        </member>
        <member name="F:Cosmos.System.MouseState.FifthButton">
            <summary>
            The fifth mouse button is pressed.
            </summary>
        </member>
        <member name="T:Cosmos.System.MouseManager">
            <summary>
            Mouse manager class.
            </summary>
        </member>
        <member name="F:Cosmos.System.MouseManager.X">
            <summary>
            The X location of the mouse.
            </summary>
        </member>
        <member name="F:Cosmos.System.MouseManager.Y">
            <summary>
            The Y location of the mouse.
            </summary>
        </member>
        <member name="F:Cosmos.System.MouseManager.MouseState">
            <summary>
            The state the mouse is currently in.
            </summary>
        </member>
        <member name="F:Cosmos.System.MouseManager.MouseSensitivity">
            <summary>
            The sensitivity of the mouse, 1.0f is the default.
            </summary>
        </member>
        <member name="P:Cosmos.System.MouseManager.ScreenWidth">
            <summary>
            The screen width (i.e. max value of X).
            </summary>
        </member>
        <member name="P:Cosmos.System.MouseManager.ScreenHeight">
            <summary>
            The screen height (i.e. max value of Y).
            </summary>
        </member>
        <member name="M:Cosmos.System.MouseManager.#cctor">
            <summary>
            Mouse manager constructor.
            </summary>
        </member>
        <member name="M:Cosmos.System.MouseManager.HandleMouse(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Mouse handler.
            </summary>
            <param name="aDeltaX">Mouse location change on X axis.</param>
            <param name="aDeltaY">Mouse location change on Y axis.</param>
            <param name="aMouseState">Mouse pressed button state</param>
            <param name="aScrollWheel">unused</param>
        </member>
        <member name="M:Cosmos.System.MouseManager.AddMouse(Cosmos.HAL.MouseBase)">
            <summary>
            Add mouse to the mouse list.
            </summary>
            <param name="aMouse">A mouse to add.</param>
        </member>
        <member name="T:Cosmos.System.Network.ARP.ARPCache">
            <summary>
            ARPCache class.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.ARP.ARPCache.cache">
            <summary>
            Cache.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.ARP.ARPCache.ensureCacheExists">
            <summary>
            Ensure cache exists.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.ARP.ARPCache.Contains(Cosmos.System.Network.IPv4.Address)">
            <summary>
            Check if ARP cache contains the given IP.
            </summary>
            <param name="ipAddress">IP address to check.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.Network.ARP.ARPCache.Update(Cosmos.System.Network.IPv4.Address,Cosmos.HAL.Network.MACAddress)">
            <summary>
            Update ARP cache.
            </summary>
            <param name="ipAddress">IP address.</param>
            <param name="macAddress">MAC address.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.ARP.ARPCache.Resolve(Cosmos.System.Network.IPv4.Address)">
            <summary>
            Resolve ARP cache.
            </summary>
            <param name="ipAddress">IP address.</param>
            <returns>MAC address.</returns>
        </member>
        <member name="T:Cosmos.System.Network.ARP.ARPPacket">
            <summary>
            ARPPacket class. See also: <seealso cref="T:Cosmos.System.Network.EthernetPacket"/>.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.ARP.ARPPacket.aHardwareType">
            <summary>
            Hardware type.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.ARP.ARPPacket.aProtocolType">
            <summary>
            Protocol type.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.ARP.ARPPacket.aHardwareLen">
            <summary>
            Hardware address length.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.ARP.ARPPacket.aProtocolLen">
            <summary>
            Protocol address length.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.ARP.ARPPacket.aOperation">
            <summary>
            Operation code.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.ARP.ARPPacket.ARPHandler(System.Byte[])">
            <summary>
            ARP handler.
            </summary>
            <param name="packetData">Packet data.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.OverflowException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.ARP.ARPPacket.VMTInclude">
            <summary>
            Work around to make VMT scanner include the initFields method
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.ARP.ARPPacket.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.ARP.ARPPacket"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.ARP.ARPPacket.#ctor(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.ARP.ARPPacket"/> class.
            </summary>
            <param name="rawData">Raw data.</param>
        </member>
        <member name="M:Cosmos.System.Network.ARP.ARPPacket.initFields">
            <summary>
            Init ARPPacket fields.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.ARP.ARPPacket.#ctor(Cosmos.HAL.Network.MACAddress,Cosmos.HAL.Network.MACAddress,System.UInt16,System.UInt16,System.Byte,System.Byte,System.UInt16,System.Int32)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.ARP.ARPPacket"/> class.
            </summary>
            <param name="dest">Destination MAC address.</param>
            <param name="src">Source MAC address.</param>
            <param name="hwType">Hardware type.</param>
            <param name="protoType">Protocol type.</param>
            <param name="hwLen">Hardware address length.</param>
            <param name="protoLen">Protocol length.</param>
            <param name="operation">Operation.</param>
            <param name="packet_size">Packet size.</param>
        </member>
        <member name="P:Cosmos.System.Network.ARP.ARPPacket.Operation">
            <summary>
            Get operation.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.ARP.ARPPacket.HardwareType">
            <summary>
            Get hardware type.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.ARP.ARPPacket.ProtocolType">
            <summary>
            Get protocol type.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.ARP.ARPPacket.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="T:Cosmos.System.Network.EthernetPacket">
            <summary>
            EthernetPacket class.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.EthernetPacket.srcMAC">
            <summary>
            Source MAC address.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.EthernetPacket.destMAC">
            <summary>
            Destination MAC address.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.EthernetPacket.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.EthernetPacket"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.EthernetPacket.#ctor(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.EthernetPacket"/> class, with specified raw data.
            </summary>
            <param name="rawData">Raw data.</param>
        </member>
        <member name="M:Cosmos.System.Network.EthernetPacket.initFields">
            <summary>
            Init EthernetPacket fields.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.EthernetPacket.#ctor(System.UInt16,System.Int32)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.EthernetPacket"/> class, with specified type and size.
            </summary>
            <param name="type">Type.</param>
            <param name="packet_size">Size.</param>
        </member>
        <member name="M:Cosmos.System.Network.EthernetPacket.#ctor(Cosmos.HAL.Network.MACAddress,Cosmos.HAL.Network.MACAddress,System.UInt16,System.Int32)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.EthernetPacket"/> class, with specified dsetination, source, type and size.
            </summary>
            <param name="dest">Destination.</param>
            <param name="src">Source.</param>
            <param name="type">Type.</param>
            <param name="packet_size">Size.</param>
        </member>
        <member name="P:Cosmos.System.Network.EthernetPacket.RawData">
            <summary>
            Get raw data byte array.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.EthernetPacket.SourceMAC">
            <summary>
            Get and set source MAC address.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.EthernetPacket.DestinationMAC">
            <summary>
            Get and set destination MAC address.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.EthernetPacket.EthernetType">
            <summary>
            Get packet type.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.EthernetPacket.PrepareForSending">
            <summary>
            Prepare packet for sending.
            Not implemented.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.EthernetPacket.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.Address">
            <summary>
            Address class, used to define a IPv4 address.
            <remarks>Should actually be using System.Net.IPAddress, but gives problems.</remarks>
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.Address.Zero">
            <summary>
            Predefined 0.0.0.0 address.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.Address.Broadcast">
            <summary>
            Broadcast address (255.255.255.255).
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.Address.address">
            <summary>
            address as byte array.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Address.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.Address"/> class, with specified IP address.
            </summary>
            <param name="aFirst">First block of the address.</param>
            <param name="aSecond">Second block of the address.</param>
            <param name="aThird">Third block of the address.</param>
            <param name="aFourth">Fourth block of the address.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Address.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.Address"/> class, with specified buffer and offset.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <exception cref="T:System.ArgumentException">Thrown if buffer is invalid or null.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Address.Parse(System.String)">
            <summary>
            Parse a IP address in string representation.
            </summary>
            <param name="adr">IP address as string.</param>
            <returns>Address value.</returns>
            <exception cref="T:System.OverflowException">Thrown if adr is longer than Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if adr is null.</exception>
            <exception cref="T:System.FormatException">Thrown if adr is not in the right format.</exception>
            <exception cref="T:System.OverflowException">Thrown if adr represents a number less than Byte.MinValue or greater than Byte.MaxValue.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Address.IsLoopbackAddress">
            <summary>
            Check if address is a loopback address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Address.IsBroadcastAddress">
            <summary>
            Check if address is a broadcast address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Address.IsAPIPA">
            <summary>
            Check if address is a APIPA address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Address.ToString">
            <summary>
            Converts IP Address to String.
            </summary>
            <returns>String with IP Address in dotted notation</returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Address.ToByteArray">
            <summary>
            Convert address to byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Address.to32BitNumber">
            <summary>
            Convert address to 32 bit number.
            </summary>
            <returns>UInt32 value.</returns>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.Address.hash">
            <summary>
            Hashed value for the IP.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.Address.Hash">
            <summary>
            Hash value for this IP. Used to uniquely identify each IP
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Address.CompareTo(System.Object)">
            <summary>
            Compare 2 IP Address objects for equality
            </summary>
            <param name="obj">Other IP to compare with.</param>
            <returns>0 if equal, or non-zero otherwise</returns>
            <exception cref="T:System.ArgumentException">Thrown if obj is not a IPv4Address.</exception>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.ARPPacket_Ethernet">
            <summary>
            ARPPacket_Ethernet abstract class. See also: <seealso cref="T:Cosmos.System.Network.ARP.ARPPacket"/>
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.mSenderMAC">
            <summary>
            Sender MAC address.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.mTargetMAC">
            <summary>
            Target MAC address.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.mSenderIP">
            <summary>
            Sender IP address.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.mTargetIP">
            <summary>
            Target IP address.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ARPRequest_Ethernet"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.#ctor(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ARPRequest_Ethernet"/> class.
            </summary>
            <param name="rawData">Raw data.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.initFields">
            <summary>
            Init ARPPacket_Ethernet fields.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.#ctor(System.UInt16,Cosmos.HAL.Network.MACAddress,Cosmos.System.Network.IPv4.Address,Cosmos.HAL.Network.MACAddress,Cosmos.System.Network.IPv4.Address,System.Int32,Cosmos.HAL.Network.MACAddress)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ARPRequest_Ethernet"/> class.
            </summary>
            <param name="operation">Operation.</param>
            <param name="senderMAC">Source MAC address.</param>
            <param name="senderIP">Source IP address.</param>
            <param name="targetMAC">Destination MAC address.</param>
            <param name="targetIP">Destination IP address.</param>
            <param name="packet_size">Packet size.</param>
            <param name="arpTargetMAC">ARP destination MAC address.</param>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.SenderMAC">
            <summary>
            Get sender MAC.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.TargetMAC">
            <summary>
            Get target MAC.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.SenderIP">
            <summary>
            Get sender IP.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.TargetIP">
            <summary>
            Get target IP.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPPacket_Ethernet.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.ARPReply_Ethernet">
            <summary>
            ARPRequest_Ethernet class. See also: <seealso cref="T:Cosmos.System.Network.IPv4.ARPReply_Ethernet"/>.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPReply_Ethernet.VMTInclude">
            <summary>
            Work around to make VMT scanner include the initFields method
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPReply_Ethernet.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ARPReply_Ethernet"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPReply_Ethernet.#ctor(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ARPReply_Ethernet"/> class.
            </summary>
            <param name="rawData">Raw data.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPReply_Ethernet.#ctor(Cosmos.HAL.Network.MACAddress,Cosmos.System.Network.IPv4.Address,Cosmos.HAL.Network.MACAddress,Cosmos.System.Network.IPv4.Address)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ARPReply_Ethernet"/> class.
            </summary>
            <param name="ourMAC">Source MAC address.</param>
            <param name="ourIP">Source IP address.</param>
            <param name="targetMAC">Destination MAC address.</param>
            <param name="targetIP">Destination IP address.</param>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPReply_Ethernet.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.ARPRequest_Ethernet">
            <summary>
            ARPRequest_Ethernet class. See also: <seealso cref="T:Cosmos.System.Network.IPv4.ARPPacket_Ethernet"/>.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPRequest_Ethernet.VMTInclude">
            <summary>
            Work around to make VMT scanner include the initFields method
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPRequest_Ethernet.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ARPRequest_Ethernet"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPRequest_Ethernet.#ctor(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ARPRequest_Ethernet"/> class.
            </summary>
            <param name="rawData">Raw data.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPRequest_Ethernet.#ctor(Cosmos.HAL.Network.MACAddress,Cosmos.System.Network.IPv4.Address,Cosmos.HAL.Network.MACAddress,Cosmos.System.Network.IPv4.Address,Cosmos.HAL.Network.MACAddress)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ARPRequest_Ethernet"/> class.
            </summary>
            <param name="ourMAC">Source MAC address.</param>
            <param name="ourIP">Source IP address.</param>
            <param name="targetMAC">Destination MAC address.</param>
            <param name="targetIP">Destination IP address.</param>
            <param name="arpTargetMAC">ARP destination MAC address.</param>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ARPRequest_Ethernet.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.Config">
            <summary>
            Contains a IPv4 configuration
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.Config.ipConfigs">
            <summary>
            IPv4 configurations list.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Config.Add(Cosmos.System.Network.IPv4.Config)">
            <summary>
            Add IPv4 configuration.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Config.FindNetwork(Cosmos.System.Network.IPv4.Address)">
            <summary>
            Find network.
            </summary>
            <param name="destIP">Destination IP address.</param>
            <returns>Address value.</returns>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Config.IsLocalAddress(Cosmos.System.Network.IPv4.Address)">
            <summary>
            Check if address is local address.
            </summary>
            <param name="destIP">Address to check.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Config.FindInterface(Cosmos.System.Network.IPv4.Address)">
            <summary>
            Find interface.
            </summary>
            <param name="sourceIP">Source IP.</param>
            <returns>NetworkDevice value.</returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Config.FindRoute(Cosmos.System.Network.IPv4.Address)">
            <summary>
            Find route to address.
            </summary>
            <param name="destIP">Destination IP.</param>
            <returns>Address value.</returns>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Config.#ctor(Cosmos.System.Network.IPv4.Address,Cosmos.System.Network.IPv4.Address)">
            <summary>
            Create a IPv4 Configuration with no default gateway
            </summary>
            <param name="ip">IP Address</param>
            <param name="subnet">Subnet Mask</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.Config.#ctor(Cosmos.System.Network.IPv4.Address,Cosmos.System.Network.IPv4.Address,Cosmos.System.Network.IPv4.Address)">
            <summary>
            Create a IPv4 Configuration
            </summary>
            <param name="ip">IP Address</param>
            <param name="subnet">Subnet Mask</param>
            <param name="gw">Default gateway</param>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.Config.IPAddress">
            <summary>
            Get IP address.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.Config.SubnetMask">
            <summary>
            Get subnet mask.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.Config.DefaultGateway">
            <summary>
            Get default gateway.
            </summary>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.EndPoint">
            <summary>
            EndPoint class.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.EndPoint.address">
            <summary>
            Address.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.EndPoint.port">
            <summary>
            Port.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.EndPoint.#ctor(Cosmos.System.Network.IPv4.Address,System.UInt16)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.EndPoint"/> class.
            </summary>
            <param name="addr">Adress.</param>
            <param name="port">Port.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.EndPoint.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.EndPoint.CompareTo(System.Object)">
            <summary>
            Compare end points.
            </summary>
            <param name="obj">Other end point to compare to.</param>
            <returns>-1 if end points are diffrent, 0 if equal.</returns>
            <exception cref="T:System.ArgumentException">Thrown if obj is not a EndPoint.</exception>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.ICMPPacket">
            <summary>
            ICMPPacket class. See also: <seealso cref="T:Cosmos.System.Network.IPv4.IPPacket"/>.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.ICMPPacket.icmpType">
            <summary>
            Packet type.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.ICMPPacket.icmpCode">
            <summary>
            Packet code.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.ICMPPacket.icmpCRC">
            <summary>
            Packet CRC.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.ICMPPacket.recvd_reply">
            <summary>
            Received reply.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPPacket.ICMPHandler(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ICMPPacket"/> class.
            </summary>
            <param name="packetData">Packet data.</param>
            <exception cref="T:System.ArgumentException">Thrown if packetData is invalid.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPPacket.VMTInclude">
            <summary>
            Work around to make VMT scanner include the initFields method
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPPacket.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ICMPPacket"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPPacket.#ctor(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ICMPPacket"/> class.
            </summary>
            <param name="rawData">Raw data.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPPacket.initFields">
            <summary>
            Init ICMPPacket fields.1
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPPacket.#ctor(Cosmos.System.Network.IPv4.Address,Cosmos.System.Network.IPv4.Address,System.Byte,System.Byte,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ICMPPacket"/> class.
            </summary>
            <param name="source">Source address.</param>
            <param name="dest">Destination address.</param>
            <param name="type">Type.</param>
            <param name="code">Code.</param>
            <param name="id">ID.</param>
            <param name="seq">SEQ.</param>
            <param name="icmpDataSize">Data size.</param>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPPacket.CalcICMPCRC(System.UInt16)">
            <summary>
            Calculate ICMP CRC3.
            </summary>
            <param name="length">Lenght.</param>
            <returns></returns>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.ICMPPacket.ICMP_Type">
            <summary>
            Get ICMP type.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.ICMPPacket.ICMP_Code">
            <summary>
            Get ICMP code.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.ICMPPacket.ICMP_CRC">
            <summary>
            Get ICMP CRC.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.ICMPPacket.ICMP_DataLength">
            <summary>
            Get ICMP data length.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPPacket.GetICMPData">
            <summary>
            Get ICMP data.
            </summary>
            <returns>byte array value.</returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPPacket.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.ICMPEchoRequest">
            <summary>
            ICMPEchoRequest class. See also: <seealso cref="T:Cosmos.System.Network.IPv4.ICMPPacket"/>.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPEchoRequest.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ICMPEchoRequest"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPEchoRequest.#ctor(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ICMPEchoRequest"/> class.
            </summary>
            <param name="rawData">Raw data.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPEchoRequest.VMTInclude">
            <summary>
            Work around to make VMT scanner include the initFields method
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPEchoRequest.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.ICMPEchoReply">
            <summary>
            ICMPEchoReply class. See also: <seealso cref="T:Cosmos.System.Network.IPv4.ICMPPacket"/>.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPEchoReply.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ICMPEchoReply"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPEchoReply.#ctor(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ICMPEchoReply"/> class.
            </summary>
            <param name="rawData">Raw data.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPEchoReply.VMTInclude">
            <summary>
            Work around to make VMT scanner include the initFields method
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPEchoReply.initFields">
            <summary>
            Init ICMPEchoReply fields.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPEchoReply.#ctor(Cosmos.System.Network.IPv4.ICMPEchoRequest)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.ICMPEchoReply"/> class.
            </summary>
            <param name="request">ICMP echo request.</param>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.ICMPEchoReply.ICMP_ID">
            <summary>
            Get ICMP ID.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.ICMPEchoReply.ICMP_Sequence">
            <summary>
            Get ICMP sequence.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.ICMPEchoReply.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.IPPacket">
            <summary>
            IPPacket class. See also: <seealso cref="T:Cosmos.System.Network.EthernetPacket"/>.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.IPPacket.IPv4Handler(System.Byte[])">
            <summary>
            IPv4 handler.
            </summary>
            <param name="packetData">Packet data.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.OverflowException">Thrown if packetData array length is greater than Int32.MaxValue.</exception>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.NextIPFragmentID">
            <summary>
            Get next IP fragment ID.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.IPPacket.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.IPPacket"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.IPPacket.#ctor(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.IPPacket"/> class.
            </summary>
            <param name="rawData">Raw data.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.IPPacket.initFields">
            <summary>
            Init IPPacket fields.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.IPPacket.#ctor(System.UInt16,System.Byte,Cosmos.System.Network.IPv4.Address,Cosmos.System.Network.IPv4.Address,System.Byte)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.IPPacket"/> class.
            </summary>
            <param name="dataLength">Data length.</param>
            <param name="protocol">Protocol.</param>
            <param name="source">Source address.</param>
            <param name="dest">Destionation address.</param>
            <param name="Flags">Flags.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.IPPacket.#ctor(Cosmos.HAL.Network.MACAddress,Cosmos.HAL.Network.MACAddress,System.UInt16,System.Byte,Cosmos.System.Network.IPv4.Address,Cosmos.System.Network.IPv4.Address,System.Byte)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.IPPacket"/> class.
            </summary>
            <param name="srcMAC">Source MAC address.</param>
            <param name="destMAC">Destination MAC address.</param>
            <param name="dataLength">Data length.</param>
            <param name="protocol">Protocol.</param>
            <param name="source">Source address.</param>
            <param name="dest">Destionation address.</param>
            <param name="Flags">Flags.</param>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.IPPacket.CalcOcCRC(System.UInt16,System.UInt16)">
            <summary>
            Calcutale CRC.
            </summary>
            <param name="offset">Offset.</param>
            <param name="length">Length.</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.IPPacket.CalcOcCRC(System.Byte[],System.UInt16,System.Int32)">
            <summary>
            Calcutale CRC.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <param name="length">Length.</param>
            <returns>ushort value.</returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.IPPacket.CalcIPCRC(System.UInt16)">
            <summary>
            Calcutale CRC.
            </summary>
            <param name="headerLength">Header length.</param>
            <returns>ushort value.</returns>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.IPVersion">
            <summary>
            Get IP version.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.HeaderLength">
            <summary>
            Get header length.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.TypeOfService">
            <summary>
            Get type of service.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.IPLength">
            <summary>
            Get IP length.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.FragmentID">
            <summary>
            Get fragment ID.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.Flags">
            <summary>
            Get flags.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.FragmentOffset">
            <summary>
            Get fragment offset.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.TTL">
            <summary>
            Get TTL.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.Protocol">
            <summary>
            Get protocol.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.IPCRC">
            <summary>
            Get IPCRC.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.SourceIP">
            <summary>
            Get source IP.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.DestinationIP">
            <summary>
            Get destination IP.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.DataOffset">
            <summary>
            Get data offset.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.IPPacket.DataLength">
            <summary>
            Get data length.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.IPPacket.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.OutgoingBuffer">
            <summary>
            OutgoingBuffer class.
            </summary>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry">
            <summary>
            BufferEntry class.
            </summary>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.EntryStatus">
            <summary>
            Entry status.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.EntryStatus.ADDED">
            <summary>
            Added.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.EntryStatus.ARP_SENT">
            <summary>
            ARP sent.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.EntryStatus.ROUTE_ARP_SENT">
            <summary>
            Route ARP sent.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.EntryStatus.JUST_SEND">
            <summary>
            Just send.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.EntryStatus.DONE">
            <summary>
            Done.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.EntryStatus.DHCP_REQUEST">
            <summary>
            DHCP request.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.NIC">
            <summary>
            Network Interface Controller.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.Packet">
            <summary>
            IP packet.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.Status">
            <summary>
            Entry status
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.nextHop">
            <summary>
            Next hop.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry.#ctor(Cosmos.HAL.NetworkDevice,Cosmos.System.Network.IPv4.IPPacket)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.OutgoingBuffer.BufferEntry"/> class.
            </summary>
            <param name="nic">Network device.</param>
            <param name="packet">IP packet.</param>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.OutgoingBuffer.queue">
            <summary>
            Buffer queue.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.OutgoingBuffer.ensureQueueExists">
            <summary>
            Ensure queue exists.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.OutgoingBuffer.AddPacket(Cosmos.System.Network.IPv4.IPPacket)">
            <summary>
            Add packet.
            </summary>
            <param name="packet">IP packet.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.OutgoingBuffer.AddPacket(Cosmos.System.Network.IPv4.IPPacket,Cosmos.HAL.NetworkDevice)">
            <summary>
            Add packet.
            </summary>
            <param name="packet">IP packet.</param>
            <param name="device">Network Interface Controller.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.OutgoingBuffer.Send">
            <summary>
            Send packet.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
            <exception cref="T:System.OverflowException">Thrown if RawData length is bigger than Int32.MaxValue.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.OutgoingBuffer.ARPCache_Update(Cosmos.System.Network.IPv4.ARPReply_Ethernet)">
            <summary>
            ARP cache update.
            </summary>
            <param name="arp_reply">ARP reply.</param>
            <exception cref="T:System.ArgumentException">Thrown if arp_reply.SenderIP is not a IPv4Address.</exception>
        </member>
        <member name="T:Cosmos.System.Network.IPv4.UDPPacket">
            <summary>
            UDPPacket class.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.IPv4.UDPPacket.udpCRC">
            <summary>
            UDP CRC.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.UDPPacket.UDPHandler(System.Byte[])">
            <summary>
            UDP handler.
            </summary>
            <param name="packetData">Packet data.</param>
            <exception cref="T:System.OverflowException">Thrown if UDP_Data array length is greater than Int32.MaxValue.</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.UDPPacket.MakeHeader(System.Byte[],System.Byte[],System.UInt16,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Make header.
            </summary>
            <param name="sourceIP">Source IP.</param>
            <param name="destIP">Destination IP.</param>
            <param name="udpLen">UDP length.</param>
            <param name="sourcePort">Source port.</param>
            <param name="destPort">Destination port.</param>
            <param name="UDP_Data">UDP data.</param>
            <returns>byte array value.</returns>
            <exception cref="T:System.OverflowException">Thrown if UDP_Data array length is greater than Int32.MaxValue.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.UDPPacket.CheckCRC(Cosmos.System.Network.IPv4.UDPPacket)">
            <summary>
            Check CRC.
            </summary>
            <param name="packet">Packer to be checked.</param>
            <returns>bool value.</returns>
            <exception cref="T:System.OverflowException">Thrown if packet.UDP_Data lenght if greater than Int32.MaxValue.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.UDPPacket.Check(System.Byte[],System.UInt16,System.Int32)">
            <summary>
            Calculate CRC.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <param name="length">Length.</param>
            <returns>ushort value.</returns>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.UDPPacket.VMTInclude">
            <summary>
            Work around to make VMT scanner include the initFields method
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.UDPPacket.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.UDPPacket"/> class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.UDPPacket.#ctor(System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.UDPPacket"/> class.
            </summary>
            <param name="rawData">Raw data.</param>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.UDPPacket.#ctor(Cosmos.System.Network.IPv4.Address,Cosmos.System.Network.IPv4.Address,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.IPv4.UDPPacket"/> class.
            </summary>
            <param name="source">Source address.</param>
            <param name="dest">Destination address.</param>
            <param name="srcPort">Source port.</param>
            <param name="destPort">Destination port.</param>
            <param name="data">Data array.</param>
            <exception cref="T:System.OverflowException">Thrown if data array length is greater than Int32.MaxValue.</exception>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.UDPPacket.initFields">
            <summary>
            Init UDPPacket fields.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if RawData is invalid or null.</exception>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.UDPPacket.DestinationPort">
            <summary>
            Get destination port.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.UDPPacket.SourcePort">
            <summary>
            Get source port.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.UDPPacket.UDP_Length">
            <summary>
            Get UDP length.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.UDPPacket.UDP_DataLength">
            <summary>
            Get UDP data lenght.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.IPv4.UDPPacket.UDP_Data">
            <summary>
            Get UDP data.
            </summary>
            <exception cref="T:System.OverflowException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.IPv4.UDPPacket.ToString">
            <summary>
            To string.
            </summary>
            <returns>string value.</returns>
        </member>
        <member name="T:Cosmos.System.Network.UdpClient">
            <summary>
            UdpClient class. Used to manage the UDP connection to a client.
            </summary>
        </member>
        <member name="T:Cosmos.System.Network.UdpClient.DataGram">
            <summary>
            Datagram class.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.UdpClient.DataGram.data">
            <summary>
            Data array.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.UdpClient.DataGram.source">
            <summary>
            Source end point.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.DataGram.#ctor(System.Byte[],Cosmos.System.Network.IPv4.EndPoint)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.UdpClient.DataGram"/> class.
            </summary>
            <param name="data">Data array.</param>
            <param name="src">Source end point.</param>
        </member>
        <member name="F:Cosmos.System.Network.UdpClient.clients">
            <summary>
            Clients dictionary.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.UdpClient.localPort">
            <summary>
            Local port.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.UdpClient.destination">
            <summary>
            Destination address.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.UdpClient.destinationPort">
            <summary>
            Destination port.
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.UdpClient.rxBuffer">
            <summary>
            RX buffer queue.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.#cctor">
            <summary>
            Assign clients dictionary.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.Client(System.UInt16)">
            <summary>
            Get client.
            </summary>
            <param name="destPort">Destination port.</param>
            <returns>UdpClient</returns>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.UdpClient"/> class.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentException">Thrown if UdpClient with localPort 0 exists.</exception>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.#ctor(System.Int32)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.UdpClient"/> class.
            </summary>
            <param name="localPort">Local port.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentException">Thrown if localPort already exists.</exception>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.#ctor(Cosmos.System.Network.IPv4.Address,System.Int32)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.UdpClient"/> class.
            </summary>
            <param name="dest">Destination address.</param>
            <param name="destPort">Destination port.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentException">Thrown if UdpClient with localPort 0 exists.</exception>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.Connect(Cosmos.System.Network.IPv4.Address,System.Int32)">
            <summary>
            Connect to client.
            </summary>
            <param name="dest">Destination address.</param>
            <param name="destPort">Destination port.</param>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.Send(System.Byte[])">
            <summary>
            Send data to client.
            </summary>
            <param name="data">Data array to send.</param>
            <exception cref="T:System.Exception">Thrown if destination is null or destinationPort is 0.</exception>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.OverflowException">Thrown if data array length is greater than Int32.MaxValue.</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.Send(System.Byte[],Cosmos.System.Network.IPv4.Address,System.Int32)">
            <summary>
            Send data.
            </summary>
            <param name="data">Data array.</param>
            <param name="dest">Destination address.</param>
            <param name="destPort">Destination port.</param>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.OverflowException">Thrown if data array length is greater than Int32.MaxValue.</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.Close">
            <summary>
            Close connection.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.Receive(Cosmos.System.Network.IPv4.EndPoint@)">
            <summary>
            Receive data from end point.
            </summary>
            <param name="source">Source end point.</param>
            <returns>byte array value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.UdpClient.receiveData(Cosmos.System.Network.IPv4.UDPPacket)">
            <summary>
            Receive data from packet.
            </summary>
            <param name="packet">Packet to receive.</param>
            <exception cref="T:System.OverflowException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
        </member>
        <member name="T:Cosmos.System.Network.NetworkStack">
            <summary>
            Implement a Network Stack for all network devices and protocols
            </summary>
        </member>
        <member name="F:Cosmos.System.Network.NetworkStack.debugger">
            <summary>
            Debugger inctanse of the "System" ring, with the "NetworkStack" tag.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.NetworkStack.AddressMap">
            <summary>
            Get address dictionary.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.NetworkStack.Init">
            <summary>
            Initialize the Network Stack to prepare it for operation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.NetworkStack.ConfigIP(Cosmos.HAL.NetworkDevice,Cosmos.System.Network.IPv4.Config)">
            <summary>
            Configure a IP configuration on the given network device.
            <remarks>Multiple IP Configurations can be made, like *nix environments</remarks>
            </summary>
            <param name="nic"><see cref="T:Cosmos.HAL.NetworkDevice"/> that will have the assigned configuration</param>
            <param name="config"><see cref="T:Cosmos.System.Network.IPv4.Config"/> instance that defines the IP Address, Subnet
            Mask and Default Gateway for the device</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item>Thrown if configuration with the given config.IPAddress.Hash already exists.</item>
            <item>Thrown on fatal error (contact support).</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
            <exception cref="T:System.OverflowException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.NetworkStack.HandlePacket(System.Byte[])">
            <summary>
            Handle packet.
            </summary>
            <param name="packetData">Packet data array.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.OverflowException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.NetworkStack.Update">
            <summary>
            Called continously to keep the Network Stack going.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown on fatal error (contact support).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on memory error.</exception>
            <exception cref="T:System.OverflowException">Thrown if data length of any packet in the queue is bigger than Int32.MaxValue.</exception>
        </member>
        <member name="T:Cosmos.System.Network.TempDictionary`1">
            <summary>
            TempDictionary template class.
            </summary>
            <typeparam name="TValue">TempDictionary type name.</typeparam>
        </member>
        <member name="P:Cosmos.System.Network.TempDictionary`1.Count">
            <summary>
            Get the number of elements in the list.
            </summary>
        </member>
        <member name="M:Cosmos.System.Network.TempDictionary`1.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.TempDictionary`1"/> class.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.TempDictionary`1.#ctor(System.Int32)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.Network.TempDictionary`1"/> class, with a specified initial size.
            </summary>
            <param name="initialSize">Initial size.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if initialSize is less than 0.</exception>
        </member>
        <member name="P:Cosmos.System.Network.TempDictionary`1.Keys">
            <summary>
            Get TempDictionary{TValue} keys array.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.TempDictionary`1.Values">
            <summary>
            Get TempDictionary{TValue} values array.
            </summary>
        </member>
        <member name="P:Cosmos.System.Network.TempDictionary`1.Item(System.UInt32)">
            <summary>
            Get and set the element with the specified key.
            </summary>
            <param name="key">Key of an element.</param>
            <returns>TValue value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">(set) Thrown if no element with the specified key is found.</exception>
        </member>
        <member name="M:Cosmos.System.Network.TempDictionary`1.ContainsKey(System.UInt32)">
            <summary>
            Check if the key exists in the TempDictionary{TValue}.
            </summary>
            <param name="key">Key to check if exists.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:Cosmos.System.Network.TempDictionary`1.Add(System.UInt32,`0)">
            <summary>
            Adds an object at the end of the TempDictionary{TValue}.
            </summary>
            <param name="key">Object key.</param>
            <param name="val">Object value.</param>
            <exception cref="T:System.ArgumentException">Thrown if key already exists.</exception>
        </member>
        <member name="M:Cosmos.System.Network.TempDictionary`1.Remove(System.UInt32)">
            <summary>
            Removes the element with the specified key of the TempDictionary{TValue}.
            </summary>
            <param name="key">Key of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on fatal error (contact support).</exception>
        </member>
        <member name="M:Cosmos.System.Network.TempDictionary`1.Remove(System.Int32)">
            <summary>
            Removes the element at the specified index of the TempDictionary{TValue}.
            </summary>
            <param name="index">Index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if no such index exists in the TempDictionary.</exception>
        </member>
        <member name="M:Cosmos.System.Network.TempDictionary`1.Clear">
            <summary>
            Removes all elements from the TempDictionary{TValue}.
            </summary>
        </member>
        <member name="T:Cosmos.System.PCSExtensions">
            <summary>
            PC speaker helper class.
            </summary>
        </member>
        <member name="M:Cosmos.System.PCSExtensions.MsToHz(System.Int32)">
            <summary>
            Convert milliseconds (ms) to hertz (Hz).
            </summary>
            <param name="ms">A milliseconds value, must be > 0.</param>
            <returns>integer value.</returns>
        </member>
        <member name="M:Cosmos.System.PCSExtensions.MsToHz(System.UInt32)">
            <summary>
            Convert milliseconds (ms) to hertz (Hz).
            </summary>
            <param name="ms">A milliseconds value, must be > 0.</param>
            <returns>integer value.</returns>
        </member>
        <member name="T:Cosmos.System.Durations">
            <summary>
            Possible duration types.
            <seealso cref="!:https://en.wikipedia.org/wiki/Duration_(music)"/>
            </summary>
        </member>
        <member name="T:Cosmos.System.Notes">
            <summary>
            Possible note types.
            <seealso cref="!:https://en.wikipedia.org/wiki/Musical_note"/>
            <seealso cref="!:https://en.wikipedia.org/wiki/Audio_frequency"/>
            </summary>
        </member>
        <member name="T:Cosmos.System.PCSpeaker">
            <summary>
            PC speaker class.
            </summary>
        </member>
        <member name="M:Cosmos.System.PCSpeaker.Beep">
            <summary>
            Play beep sound, at 800hz for one eighth.
            </summary>
        </member>
        <member name="M:Cosmos.System.PCSpeaker.Beep(System.UInt32)">
            <summary>
            Play beep sound, at a specified frequency for one eighth.
            </summary>
            <param name="frequency">Audio frequency in Hz, must be between 37 and 32767Hz.</param>
        </member>
        <member name="M:Cosmos.System.PCSpeaker.Beep(System.UInt32,System.UInt32)">
            <summary>
            Play beep sound, at a specified frequency for a specified duration.
            </summary>
            <param name="frequency">Audio frequency in Hz, must be between 37 and 32767Hz.</param>
            <param name="duration">Beep duration, must be > 0.</param>
        </member>
        <member name="M:Cosmos.System.PCSpeaker.Beep(Cosmos.System.Notes,Cosmos.System.Durations)">
            <summary>
            Play beep sound, at a specified note for a specified duration.
            </summary>
            <param name="note">A note to play.</param>
            <param name="duration">Beep duration, must be > 0.</param>
        </member>
        <member name="T:Cosmos.System.Power">
            <summary>
            Power class.
            </summary>
        </member>
        <member name="M:Cosmos.System.Power.Reboot">
            <summary>
            Reboot with CPU.
            </summary>
        </member>
        <member name="M:Cosmos.System.Power.Shutdown">
            <summary>
            Shutdown the ACPI.
            </summary>
            <exception cref="T:System.IO.IOException">Thrown on IO error.</exception>
        </member>
        <member name="T:Cosmos.System.TestingHelpers">
            <summary>
            Testing helpers class.
            </summary>
        </member>
        <member name="M:Cosmos.System.TestingHelpers.KeyboardAddFakeScanCode(System.Byte,System.Boolean)">
            <summary>
            Add fake scan codes to the keyboard, fake pressing keys.
            Used to test kernals.
            </summary>
            <param name="aScanCode">A key code.</param>
            <param name="aReleased">Is key pressed.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        </member>
        <member name="T:Cosmos.System.ExtendedASCII.CosmosEncodingProvider">
            <summary>
            CosmosEncodingProvider class. Used to provide <see cref="T:System.Text.Encoder"/>, by using its name or codepage. See also: <seealso cref="T:System.Text.EncodingProvider"/>.
            </summary>
        </member>
        <member name="F:Cosmos.System.ExtendedASCII.CosmosEncodingProvider.s_singleton">
            <summary>
            Encoding provider.
            </summary>
        </member>
        <member name="F:Cosmos.System.ExtendedASCII.CosmosEncodingProvider.myDebugger">
            <summary>
            Debugger inctanse of the "System" ring with the "CosmosEncodingProvider" tag.
            </summary>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.CosmosEncodingProvider.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.ExtendedASCII.CosmosEncodingProvider"/> class.
            </summary>
        </member>
        <member name="P:Cosmos.System.ExtendedASCII.CosmosEncodingProvider.Instance">
            <summary>
            Get CosmosEncodingProvider instance. Returns EncodingProvider.
            </summary>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.CosmosEncodingProvider.GetEncoding(System.Int32)">
            <summary>
            Get encoding, using its codepage.
            </summary>
            <param name="codepage">Codepage.</param>
            <returns>Encoding value.</returns>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.CosmosEncodingProvider.GetEncoding(System.String)">
            <summary>
            Get encoding, using its name.
            </summary>
            <param name="name">Name.</param>
            <returns>Encoding value.</returns>
        </member>
        <member name="T:Cosmos.System.ExtendedASCII.CP437Enconding">
            <summary>
            CP437Enconding class, represent CP437 encoding. See also: <seealso cref="T:Cosmos.System.ExtendedASCII.SingleByteEncoding"/>.
            </summary>
        </member>
        <member name="F:Cosmos.System.ExtendedASCII.CP437Enconding.myDebugger">
            <summary>
            Debugger inctanse of the "System" ring with the "CP437 Encoding" tag.
            </summary>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.CP437Enconding.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.ExtendedASCII.CP437Enconding"/> class.
            </summary>
        </member>
        <member name="P:Cosmos.System.ExtendedASCII.CP437Enconding.BodyName">
            <summary>
            Get encoding body name.
            </summary>
        </member>
        <member name="P:Cosmos.System.ExtendedASCII.CP437Enconding.CodePage">
            <summary>
            Get encoding codepage.
            </summary>
        </member>
        <member name="T:Cosmos.System.ExtendedASCII.CP858Enconding">
            <summary>
            CP858Enconding class, represent CP858 encoding. See also: <seealso cref="T:Cosmos.System.ExtendedASCII.SingleByteEncoding"/>.
            </summary>
        </member>
        <member name="F:Cosmos.System.ExtendedASCII.CP858Enconding.myDebugger">
            <summary>
            Debugger inctanse of the "System" ring with the "CP858 Encoding" tag.
            </summary>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.CP858Enconding.#ctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.ExtendedASCII.CP858Enconding"/> class.
            </summary>
        </member>
        <member name="P:Cosmos.System.ExtendedASCII.CP858Enconding.BodyName">
            <summary>
            Get encoding body name.
            </summary>
        </member>
        <member name="P:Cosmos.System.ExtendedASCII.CP858Enconding.CodePage">
            <summary>
            Get encoding codepage.
            </summary>
        </member>
        <member name="T:Cosmos.System.ExtendedASCII.EncodingTable">
            <summary>
            EncodingTable class. Used to manage codepage list.
            </summary>
        </member>
        <member name="F:Cosmos.System.ExtendedASCII.EncodingTable.mDebugger">
            <summary>
            Debugger inctanse of the "System" ring with the "EncodingTable" tag.
            </summary>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.EncodingTable.#cctor">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.ExtendedASCII.EncodingTable"/> class.
            </summary>
        </member>
        <member name="T:Cosmos.System.ExtendedASCII.EncodingTable.values">
            <summary>
            Struct which used to hold description and encoding.
            </summary>
        </member>
        <member name="F:Cosmos.System.ExtendedASCII.EncodingTable.values.desc">
            <summary>
            Description.
            </summary>
        </member>
        <member name="F:Cosmos.System.ExtendedASCII.EncodingTable.values.encoding">
            <summary>
            Encoding.
            </summary>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.EncodingTable.values.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Create new inctanse of the <see cref="T:Cosmos.System.ExtendedASCII.EncodingTable.values"/> struct.
            </summary>
            <param name="desc">Description.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="F:Cosmos.System.ExtendedASCII.EncodingTable.MaxCodepageChacheSize">
            <summary>
            Max codepage cache size.
            </summary>
        </member>
        <member name="F:Cosmos.System.ExtendedASCII.EncodingTable.CodepageCache">
            <summary>
            Codepage cache.
            </summary>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.EncodingTable.Add(System.Int32,System.String,System.Text.Encoding)">
            <summary>
            Add encoding to the encoding table.
            </summary>
            <param name="codepage">Codepage.</param>
            <param name="desc">Desciption.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.EncodingTable.GetDescription(System.Int32)">
            <summary>
            Get description, using codepage.
            </summary>
            <param name="codepage">Codepage.</param>
            <returns>string value.</returns>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.EncodingTable.GetEncoding(System.Int32)">
            <summary>
            Get encoding, using codepage.
            </summary>
            <param name="codepage">Codepage.</param>
            <returns>Encoding value.</returns>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.EncodingTable.GetCodePageFromDesc(System.String)">
            <summary>
            Get code page from description.
            </summary>
            <param name="desc">Description.</param>
            <returns>int value, -1 if not found.</returns>
        </member>
        <member name="T:Cosmos.System.ExtendedASCII.SingleByteEncoding">
            <summary>
            SingleByteEncoding class. Used to represent a single byte encoding.
            </summary>
        </member>
        <member name="F:Cosmos.System.ExtendedASCII.SingleByteEncoding.mDebugger">
            <summary>
            Debugger inctanse of the "System" ring with the "SingleByteEncoding" tag.
            </summary>
        </member>
        <member name="P:Cosmos.System.ExtendedASCII.SingleByteEncoding.CodePageTable">
            <summary>
            Get and set codepage table.
            </summary>
        </member>
        <member name="F:Cosmos.System.ExtendedASCII.SingleByteEncoding.ReplacementChar">
            <summary>
            Replacement char.
            </summary>
        </member>
        <member name="P:Cosmos.System.ExtendedASCII.SingleByteEncoding.IsSingleByte">
            <summary>
            Check if this is single byte.
            </summary>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.SingleByteEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Get count of bytes in chars array.
            </summary>
            <param name="chars">Chars array.</param>
            <param name="index">Starting index in chars array.</param>
            <param name="count">Number of chars to check.</param>
            <returns>int value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if chars is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if index or count are invalid.</exception>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.SingleByteEncoding.GetCodePageIdxFromChr(System.Char)">
            <summary>
            Get codepage index relative to given char.
            </summary>
            <param name="ch">Char to get the codepage of.</param>
            <returns>int value.</returns>
            <exception cref="T:System.OverflowException">Thrown if number of entrys in the codepage table is greater than Int32.MaxValue.</exception>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.SingleByteEncoding.GetByte(System.Char)">
            <summary>
            Convert char to byte.
            </summary>
            <param name="ch">Char to convert.</param>
            <returns>byte value.</returns>
            <exception cref="T:System.OverflowException">Thrown if number of entrys in the codepage table is greater than Int32.MaxValue.</exception>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.SingleByteEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Get bytes array out of chars array, and bytes count.
            </summary>
            <param name="chars">Chars array.</param>
            <param name="charIndex">Stating index in chars array.</param>
            <param name="charCount">Number of chars to convert.</param>
            <param name="bytes">Output bytes array.</param>
            <param name="byteIndex">Starting index in bytes array.</param>
            <returns>int value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if chars or bytes is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if charIndex or charCount are invalid.</exception>
            <exception cref="T:System.OverflowException">Thrown if bytes array length or codepage table length is greater than Int32.MaxValue.</exception>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.SingleByteEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get char count in bytes array.
            </summary>
            <param name="bytes">Bytes array to count the chars in.</param>
            <param name="index">Starting index.</param>
            <param name="count">Number of bytes to check.</param>
            <returns>int value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if bytes is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if index or count are invalid.</exception>
            <exception cref="T:System.OverflowException">Thrown if bytes array length is greater than Int32.MaxValue.</exception>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.SingleByteEncoding.GetChar(System.Byte)">
            <summary>
            Convert byte to char.
            </summary>
            <param name="b">byte to convert.</param>
            <returns>char value.</returns>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.SingleByteEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Convert bytes array to chars array, and get number of chars in bytes array.
            </summary>
            <param name="bytes">Bytes array to count chars in.</param>
            <param name="byteIndex">Starting index in bytes array.</param>
            <param name="byteCount">Number of bytes to convert.</param>
            <param name="chars">Output array, in which the bytes that are char would be stored in.</param>
            <param name="charIndex">Starting index in chars array</param>
            <returns>int value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if bytes is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if byteCount or byteIndex are invalid</exception>
            <exception cref="T:System.OverflowException">Thrown if number of chars is greater than Int32.MaxValue.</exception>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.SingleByteEncoding.GetMaxByteCount(System.Int32)">
            <summary>
            Get max char count.
            </summary>
            <param name="charCount">char count.</param>
            <returns>int value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if charCount is less than 0.</exception>
        </member>
        <member name="M:Cosmos.System.ExtendedASCII.SingleByteEncoding.GetMaxCharCount(System.Int32)">
            <summary>
            Get max char count.
            </summary>
            <remarks>returns byteCount.</remarks>
            <param name="byteCount">byte count</param>
            <returns>int value.</returns>
        </member>
    </members>
</doc>
